/* Generated by Cython 0.29.15 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [],
        "extra_compile_args": [
            "-O3",
            "-Wall"
        ],
        "include_dirs": [
            "./core"
        ],
        "language": "c++",
        "name": "atpy.src.cython.elements",
        "sources": [
            "src/cython/elements.pyx"
        ]
    },
    "module_name": "atpy.src.cython.elements"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_15"
#define CYTHON_HEX_VERSION 0x001D0FF0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
  #define PyObject_Unicode             PyObject_Str
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__atpy__src__cython__elements
#define __PYX_HAVE_API__atpy__src__cython__elements
/* Early includes */
#include <string.h>
#include <stdlib.h>
#include <math.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "src\\cython\\elements.pyx",
  "stringsource",
  "src\\cpp\\cppdrift.pxd",
  "src\\cpp\\cppdipole.pxd",
  "src\\cpp\\cppquadrupole.pxd",
  "cymem.pxd",
};
/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()


/*--- Type declarations ---*/
struct __pyx_obj_5cymem_5cymem_PyMalloc;
struct __pyx_obj_5cymem_5cymem_PyFree;
struct __pyx_obj_5cymem_5cymem_Pool;
struct __pyx_obj_5cymem_5cymem_Address;
struct __pyx_obj_4atpy_3src_6cython_8elements_Element;
struct __pyx_obj_4atpy_3src_6cython_8elements_Marker;
struct __pyx_obj_4atpy_3src_6cython_8elements_Drift;
struct __pyx_obj_4atpy_3src_6cython_8elements_Dipole;
struct __pyx_obj_4atpy_3src_6cython_8elements_Quadrupole;
struct __pyx_obj_4atpy_3src_6cython_8elements_Sextupole;
struct __pyx_obj_4atpy_3src_6cython_8elements_Octupole;

/* "cymem/cymem.pxd":1
 * ctypedef void* (*malloc_t)(size_t n)             # <<<<<<<<<<<<<<
 * ctypedef void (*free_t)(void *p)
 * 
 */
typedef void *(*__pyx_t_5cymem_5cymem_malloc_t)(size_t);

/* "cymem/cymem.pxd":2
 * ctypedef void* (*malloc_t)(size_t n)
 * ctypedef void (*free_t)(void *p)             # <<<<<<<<<<<<<<
 * 
 * cdef class PyMalloc:
 */
typedef void (*__pyx_t_5cymem_5cymem_free_t)(void *);
struct __pyx_t_4atpy_3src_3cpp_10cppelement_CppElement;
struct __pyx_t_4atpy_3src_3cpp_10cppelement_CppElement {

  /* "cpp/cppelement.pxd":4
 * # from libc.stdlib cimport free
 * 
 * cdef cppclass CppElement:             # <<<<<<<<<<<<<<
 *     int elem_type
 *     double l
 */
  int elem_type;
  double l;
  double angle;
  double k1;
  double k2;
  double e1;
  double e2;
  double M[6][6];
  double T[6][6];
  void __pyx_f___init__CppElement(void);
  virtual void init_matrixM(void);
  virtual void update_matrixM(void);
  virtual void update_matrixT(void);
  virtual void get_twiss(double *, double *);
  virtual void get_phase(double *, double *);
  virtual void get_dispersion(double *, double *);
  virtual void update(double *);
  __pyx_t_4atpy_3src_3cpp_10cppelement_CppElement(void) {
    __pyx_f___init__CppElement();
  }
  virtual ~__pyx_t_4atpy_3src_3cpp_10cppelement_CppElement() {
  }
};
struct __pyx_t_4atpy_3src_3cpp_9cppmarker_CppMarker;
struct __pyx_t_4atpy_3src_3cpp_9cppmarker_CppMarker : public __pyx_t_4atpy_3src_3cpp_10cppelement_CppElement {

  /* "cpp/cppmarker.pxd":2
 * from .cppelement cimport CppElement
 * cdef cppclass CppMarker(CppElement):             # <<<<<<<<<<<<<<
 *     __init__():
 *         this.elem_type = 0
 */
  void __pyx_f___init__CppMarker(void);
  virtual void get_phase(double *, double *);
  __pyx_t_4atpy_3src_3cpp_9cppmarker_CppMarker(void) {
    __pyx_f___init__CppMarker();
  }
  virtual ~__pyx_t_4atpy_3src_3cpp_9cppmarker_CppMarker() {
  }
};
struct __pyx_t_4atpy_3src_3cpp_8cppdrift_CppDrift;
struct __pyx_t_4atpy_3src_3cpp_8cppdrift_CppDrift : public __pyx_t_4atpy_3src_3cpp_10cppelement_CppElement {

  /* "cpp/cppdrift.pxd":3
 * from .cppelement cimport CppElement
 * from libc.math cimport pi,atan
 * cdef cppclass CppDrift(CppElement):             # <<<<<<<<<<<<<<
 *     __init__(double* parms):
 *         this.elem_type = 1
 */
  void __pyx_f___init__CppDrift(double *);
  virtual void update_matrixM(void);
  virtual void get_phase(double *, double *);
  virtual void update(double *);
  __pyx_t_4atpy_3src_3cpp_8cppdrift_CppDrift(double *__pyx_v_parms) {
    __pyx_f___init__CppDrift(__pyx_v_parms);
  }
  virtual ~__pyx_t_4atpy_3src_3cpp_8cppdrift_CppDrift() {
  }
};
struct __pyx_t_4atpy_3src_3cpp_9cppdipole_CppDipole;
struct __pyx_t_4atpy_3src_3cpp_9cppdipole_CppDipole : public __pyx_t_4atpy_3src_3cpp_10cppelement_CppElement {

  /* "cpp/cppdipole.pxd":3
 * from .cppelement cimport CppElement
 * from libc.math cimport sin,cos,sinh,cosh,tan,atan,exp,sqrt,pi
 * cdef cppclass CppDipole(CppElement):             # <<<<<<<<<<<<<<
 *     __init__(double* parms):
 *         this.elem_type = 2
 */
  void __pyx_f___init__CppDipole(double *);
  virtual void update_matrixM(void);
  virtual void get_phase(double *, double *);
  virtual void update(double *);
  __pyx_t_4atpy_3src_3cpp_9cppdipole_CppDipole(double *__pyx_v_parms) {
    __pyx_f___init__CppDipole(__pyx_v_parms);
  }
  virtual ~__pyx_t_4atpy_3src_3cpp_9cppdipole_CppDipole() {
  }
};
struct __pyx_t_4atpy_3src_3cpp_13cppquadrupole_CppQuadrupole;
struct __pyx_t_4atpy_3src_3cpp_13cppquadrupole_CppQuadrupole : public __pyx_t_4atpy_3src_3cpp_10cppelement_CppElement {

  /* "cpp/cppquadrupole.pxd":3
 * from .cppelement cimport CppElement
 * from libc.math cimport pi,cos,sin,cosh,sinh,tan,atan,sqrt,exp
 * cdef cppclass CppQuadrupole(CppElement):             # <<<<<<<<<<<<<<
 *     __init__(double* parms):
 *         this.elem_type = 3
 */
  void __pyx_f___init__CppQuadrupole(double *);
  virtual void update_matrixM(void);
  virtual void get_phase(double *, double *);
  virtual void update(double *);
  __pyx_t_4atpy_3src_3cpp_13cppquadrupole_CppQuadrupole(double *__pyx_v_parms) {
    __pyx_f___init__CppQuadrupole(__pyx_v_parms);
  }
  virtual ~__pyx_t_4atpy_3src_3cpp_13cppquadrupole_CppQuadrupole() {
  }
};

/* "cymem/cymem.pxd":4
 * ctypedef void (*free_t)(void *p)
 * 
 * cdef class PyMalloc:             # <<<<<<<<<<<<<<
 *     cdef malloc_t malloc
 *     cdef void _set(self, malloc_t malloc)
 */
struct __pyx_obj_5cymem_5cymem_PyMalloc {
  PyObject_HEAD
  struct __pyx_vtabstruct_5cymem_5cymem_PyMalloc *__pyx_vtab;
  __pyx_t_5cymem_5cymem_malloc_t malloc;
};


/* "cymem/cymem.pxd":10
 * cdef PyMalloc WrapMalloc(malloc_t malloc)
 * 
 * cdef class PyFree:             # <<<<<<<<<<<<<<
 *     cdef free_t free
 *     cdef void _set(self, free_t free)
 */
struct __pyx_obj_5cymem_5cymem_PyFree {
  PyObject_HEAD
  struct __pyx_vtabstruct_5cymem_5cymem_PyFree *__pyx_vtab;
  __pyx_t_5cymem_5cymem_free_t free;
};


/* "cymem/cymem.pxd":16
 * cdef PyFree WrapFree(free_t free)
 * 
 * cdef class Pool:             # <<<<<<<<<<<<<<
 *     cdef readonly size_t size
 *     cdef readonly dict addresses
 */
struct __pyx_obj_5cymem_5cymem_Pool {
  PyObject_HEAD
  struct __pyx_vtabstruct_5cymem_5cymem_Pool *__pyx_vtab;
  size_t size;
  PyObject *addresses;
  PyObject *refs;
  struct __pyx_obj_5cymem_5cymem_PyMalloc *pymalloc;
  struct __pyx_obj_5cymem_5cymem_PyFree *pyfree;
};


/* "cymem/cymem.pxd":28
 * 
 * 
 * cdef class Address:             # <<<<<<<<<<<<<<
 *     cdef void* ptr
 *     cdef readonly PyMalloc pymalloc
 */
struct __pyx_obj_5cymem_5cymem_Address {
  PyObject_HEAD
  void *ptr;
  struct __pyx_obj_5cymem_5cymem_PyMalloc *pymalloc;
  struct __pyx_obj_5cymem_5cymem_PyFree *pyfree;
};


/* "atpy/src/cython/elements.pxd":5
 * from ..cpp cimport CppElement, CppMarker, CppDrift, CppDipole, CppQuadrupole
 * 
 * cdef class Element:             # <<<<<<<<<<<<<<
 *     cdef CppElement*  elem
 *     cdef Pool mem
 */
struct __pyx_obj_4atpy_3src_6cython_8elements_Element {
  PyObject_HEAD
  struct __pyx_vtabstruct_4atpy_3src_6cython_8elements_Element *__pyx_vtab;
  __pyx_t_4atpy_3src_3cpp_10cppelement_CppElement *elem;
  struct __pyx_obj_5cymem_5cymem_Pool *mem;
  PyObject *name;
  int owner;
  PyObject *element_type;
  double *parms;
  double twiss[18];
};


/* "atpy/src/cython/elements.pxd":32
 * 
 * 
 * cdef class Marker(Element):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_4atpy_3src_6cython_8elements_Marker {
  struct __pyx_obj_4atpy_3src_6cython_8elements_Element __pyx_base;
};


/* "atpy/src/cython/elements.pxd":36
 * 
 * 
 * cdef class Drift(Element):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_4atpy_3src_6cython_8elements_Drift {
  struct __pyx_obj_4atpy_3src_6cython_8elements_Element __pyx_base;
};


/* "atpy/src/cython/elements.pxd":40
 * 
 * 
 * cdef class Dipole(Element):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_4atpy_3src_6cython_8elements_Dipole {
  struct __pyx_obj_4atpy_3src_6cython_8elements_Element __pyx_base;
};


/* "atpy/src/cython/elements.pxd":44
 * 
 * 
 * cdef class Quadrupole(Element):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_4atpy_3src_6cython_8elements_Quadrupole {
  struct __pyx_obj_4atpy_3src_6cython_8elements_Element __pyx_base;
};


/* "atpy/src/cython/elements.pxd":48
 * 
 * 
 * cdef class Sextupole(Element):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_4atpy_3src_6cython_8elements_Sextupole {
  struct __pyx_obj_4atpy_3src_6cython_8elements_Element __pyx_base;
};


/* "atpy/src/cython/elements.pxd":52
 * 
 * 
 * cdef class Octupole(Element):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_4atpy_3src_6cython_8elements_Octupole {
  struct __pyx_obj_4atpy_3src_6cython_8elements_Element __pyx_base;
};



/* "cymem/cymem.pxd":4
 * ctypedef void (*free_t)(void *p)
 * 
 * cdef class PyMalloc:             # <<<<<<<<<<<<<<
 *     cdef malloc_t malloc
 *     cdef void _set(self, malloc_t malloc)
 */

struct __pyx_vtabstruct_5cymem_5cymem_PyMalloc {
  void (*_set)(struct __pyx_obj_5cymem_5cymem_PyMalloc *, __pyx_t_5cymem_5cymem_malloc_t);
};
static struct __pyx_vtabstruct_5cymem_5cymem_PyMalloc *__pyx_vtabptr_5cymem_5cymem_PyMalloc;


/* "cymem/cymem.pxd":10
 * cdef PyMalloc WrapMalloc(malloc_t malloc)
 * 
 * cdef class PyFree:             # <<<<<<<<<<<<<<
 *     cdef free_t free
 *     cdef void _set(self, free_t free)
 */

struct __pyx_vtabstruct_5cymem_5cymem_PyFree {
  void (*_set)(struct __pyx_obj_5cymem_5cymem_PyFree *, __pyx_t_5cymem_5cymem_free_t);
};
static struct __pyx_vtabstruct_5cymem_5cymem_PyFree *__pyx_vtabptr_5cymem_5cymem_PyFree;


/* "cymem/cymem.pxd":16
 * cdef PyFree WrapFree(free_t free)
 * 
 * cdef class Pool:             # <<<<<<<<<<<<<<
 *     cdef readonly size_t size
 *     cdef readonly dict addresses
 */

struct __pyx_vtabstruct_5cymem_5cymem_Pool {
  void *(*alloc)(struct __pyx_obj_5cymem_5cymem_Pool *, size_t, size_t);
  void (*free)(struct __pyx_obj_5cymem_5cymem_Pool *, void *);
  void *(*realloc)(struct __pyx_obj_5cymem_5cymem_Pool *, void *, size_t);
};
static struct __pyx_vtabstruct_5cymem_5cymem_Pool *__pyx_vtabptr_5cymem_5cymem_Pool;


/* "atpy/src/cython/elements.pyx":2
 * import numpy as np
 * cdef class Element:             # <<<<<<<<<<<<<<
 *     def __cinit__(self,**kargs):
 *         cdef dict type2index = {'beta_x':0,'alpha_x':1,'gamma_x':2,'beta_y':3,'alpha_y':4,'gamma_y':5,
 */

struct __pyx_vtabstruct_4atpy_3src_6cython_8elements_Element {
  __pyx_t_4atpy_3src_3cpp_10cppelement_CppElement *(*bind2element)(struct __pyx_obj_4atpy_3src_6cython_8elements_Element *);
  double *(*bind2twiss)(struct __pyx_obj_4atpy_3src_6cython_8elements_Element *);
  double *(*bind2parameter)(struct __pyx_obj_4atpy_3src_6cython_8elements_Element *);
};
static struct __pyx_vtabstruct_4atpy_3src_6cython_8elements_Element *__pyx_vtabptr_4atpy_3src_6cython_8elements_Element;


/* "atpy/src/cython/elements.pyx":85
 * 
 * 
 * cdef class Marker(Element):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, **kargs):
 */

struct __pyx_vtabstruct_4atpy_3src_6cython_8elements_Marker {
  struct __pyx_vtabstruct_4atpy_3src_6cython_8elements_Element __pyx_base;
};
static struct __pyx_vtabstruct_4atpy_3src_6cython_8elements_Marker *__pyx_vtabptr_4atpy_3src_6cython_8elements_Marker;


/* "atpy/src/cython/elements.pyx":91
 *         self.owner = True
 * 
 * cdef class Drift(Element):             # <<<<<<<<<<<<<<
 *     def __init__(self,**kargs):
 *         self.elem = new CppDrift(self.parms)
 */

struct __pyx_vtabstruct_4atpy_3src_6cython_8elements_Drift {
  struct __pyx_vtabstruct_4atpy_3src_6cython_8elements_Element __pyx_base;
};
static struct __pyx_vtabstruct_4atpy_3src_6cython_8elements_Drift *__pyx_vtabptr_4atpy_3src_6cython_8elements_Drift;


/* "atpy/src/cython/elements.pyx":97
 * 
 * 
 * cdef class Dipole(Element):             # <<<<<<<<<<<<<<
 *     def __init__(self,**kargs):
 *         self.elem = new CppDipole(self.parms)
 */

struct __pyx_vtabstruct_4atpy_3src_6cython_8elements_Dipole {
  struct __pyx_vtabstruct_4atpy_3src_6cython_8elements_Element __pyx_base;
};
static struct __pyx_vtabstruct_4atpy_3src_6cython_8elements_Dipole *__pyx_vtabptr_4atpy_3src_6cython_8elements_Dipole;


/* "atpy/src/cython/elements.pyx":102
 *         self.owner = True
 * 
 * cdef class Quadrupole(Element):             # <<<<<<<<<<<<<<
 *     def __init__(self,**kargs):
 *         self.elem = new CppQuadrupole(self.parms)
 */

struct __pyx_vtabstruct_4atpy_3src_6cython_8elements_Quadrupole {
  struct __pyx_vtabstruct_4atpy_3src_6cython_8elements_Element __pyx_base;
};
static struct __pyx_vtabstruct_4atpy_3src_6cython_8elements_Quadrupole *__pyx_vtabptr_4atpy_3src_6cython_8elements_Quadrupole;


/* "atpy/src/cython/elements.pyx":107
 *         self.owner = True
 * 
 * cdef class Sextupole(Element):             # <<<<<<<<<<<<<<
 *     def __init__(self,**kargs):
 *         pass
 */

struct __pyx_vtabstruct_4atpy_3src_6cython_8elements_Sextupole {
  struct __pyx_vtabstruct_4atpy_3src_6cython_8elements_Element __pyx_base;
};
static struct __pyx_vtabstruct_4atpy_3src_6cython_8elements_Sextupole *__pyx_vtabptr_4atpy_3src_6cython_8elements_Sextupole;


/* "atpy/src/cython/elements.pyx":111
 *         pass
 * 
 * cdef class Octupole(Element):             # <<<<<<<<<<<<<<
 *     def __init__(self,**kargs):
 *         pass
 */

struct __pyx_vtabstruct_4atpy_3src_6cython_8elements_Octupole {
  struct __pyx_vtabstruct_4atpy_3src_6cython_8elements_Element __pyx_base;
};
static struct __pyx_vtabstruct_4atpy_3src_6cython_8elements_Octupole *__pyx_vtabptr_4atpy_3src_6cython_8elements_Octupole;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* py_dict_keys.proto */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Keys(PyObject* d);

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod0.proto */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CallUnboundCMethod0(cfunc, self)\
    (likely((cfunc)->func) ?\
        (likely((cfunc)->flag == METH_NOARGS) ?  (*((cfunc)->func))(self, NULL) :\
         (PY_VERSION_HEX >= 0x030600B1 && likely((cfunc)->flag == METH_FASTCALL) ?\
            (PY_VERSION_HEX >= 0x030700A0 ?\
                (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0) :\
                (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL)) :\
          (PY_VERSION_HEX >= 0x030700A0 && (cfunc)->flag == (METH_FASTCALL | METH_KEYWORDS) ?\
            (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL) :\
            (likely((cfunc)->flag == (METH_VARARGS | METH_KEYWORDS)) ?  ((*(PyCFunctionWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, __pyx_empty_tuple, NULL)) :\
               ((cfunc)->flag == METH_VARARGS ?  (*((cfunc)->func))(self, __pyx_empty_tuple) :\
               __Pyx__CallUnboundCMethod0(cfunc, self)))))) :\
        __Pyx__CallUnboundCMethod0(cfunc, self))
#else
#define __Pyx_CallUnboundCMethod0(cfunc, self)  __Pyx__CallUnboundCMethod0(cfunc, self)
#endif

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
#define __Pyx_unpack_tuple2(tuple, value1, value2, is_tuple, has_known_size, decref_tuple)\
    (likely(is_tuple || PyTuple_Check(tuple)) ?\
        (likely(has_known_size || PyTuple_GET_SIZE(tuple) == 2) ?\
            __Pyx_unpack_tuple2_exact(tuple, value1, value2, decref_tuple) :\
            (__Pyx_UnpackTupleError(tuple, 2), -1)) :\
        __Pyx_unpack_tuple2_generic(tuple, value1, value2, has_known_size, decref_tuple))
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
    PyObject* tuple, PyObject** value1, PyObject** value2, int decref_tuple);
static int __Pyx_unpack_tuple2_generic(
    PyObject* tuple, PyObject** value1, PyObject** value2, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* IncludeStringH.proto */
#include <string.h>

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static __pyx_t_4atpy_3src_3cpp_10cppelement_CppElement *__pyx_f_4atpy_3src_6cython_8elements_7Element_bind2element(struct __pyx_obj_4atpy_3src_6cython_8elements_Element *__pyx_v_self); /* proto*/
static double *__pyx_f_4atpy_3src_6cython_8elements_7Element_bind2twiss(struct __pyx_obj_4atpy_3src_6cython_8elements_Element *__pyx_v_self); /* proto*/
static double *__pyx_f_4atpy_3src_6cython_8elements_7Element_bind2parameter(struct __pyx_obj_4atpy_3src_6cython_8elements_Element *__pyx_v_self); /* proto*/

/* Module declarations from 'cymem.cymem' */
static PyTypeObject *__pyx_ptype_5cymem_5cymem_PyMalloc = 0;
static PyTypeObject *__pyx_ptype_5cymem_5cymem_PyFree = 0;
static PyTypeObject *__pyx_ptype_5cymem_5cymem_Pool = 0;
static PyTypeObject *__pyx_ptype_5cymem_5cymem_Address = 0;

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'atpy.src.cpp.cppelement' */

/* Module declarations from 'atpy.src.cpp.cppmarker' */

/* Module declarations from 'libc.math' */

/* Module declarations from 'atpy.src.cpp.cppdrift' */

/* Module declarations from 'atpy.src.cpp.cppdipole' */

/* Module declarations from 'atpy.src.cpp.cppquadrupole' */

/* Module declarations from 'atpy.src.cpp' */

/* Module declarations from 'atpy.src.cython.elements' */
static PyTypeObject *__pyx_ptype_4atpy_3src_6cython_8elements_Element = 0;
static PyTypeObject *__pyx_ptype_4atpy_3src_6cython_8elements_Marker = 0;
static PyTypeObject *__pyx_ptype_4atpy_3src_6cython_8elements_Drift = 0;
static PyTypeObject *__pyx_ptype_4atpy_3src_6cython_8elements_Dipole = 0;
static PyTypeObject *__pyx_ptype_4atpy_3src_6cython_8elements_Quadrupole = 0;
static PyTypeObject *__pyx_ptype_4atpy_3src_6cython_8elements_Sextupole = 0;
static PyTypeObject *__pyx_ptype_4atpy_3src_6cython_8elements_Octupole = 0;
#define __Pyx_MODULE_NAME "atpy.src.cython.elements"
extern int __pyx_module_is_main_atpy__src__cython__elements;
int __pyx_module_is_main_atpy__src__cython__elements = 0;

/* Implementation of 'atpy.src.cython.elements' */
static PyObject *__pyx_builtin_print;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_TypeError;
static const char __pyx_k_l[] = "l";
static const char __pyx_k_e1[] = "e1";
static const char __pyx_k_e2[] = "e2";
static const char __pyx_k_k1[] = "k1";
static const char __pyx_k_k2[] = "k2";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_keys[] = "keys";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_nu_x[] = "nu_x";
static const char __pyx_k_nu_y[] = "nu_y";
static const char __pyx_k_nu_z[] = "nu_z";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_Drift[] = "Drift";
static const char __pyx_k_angle[] = "angle";
static const char __pyx_k_array[] = "array";
static const char __pyx_k_class[] = "__class__";
static const char __pyx_k_eta_x[] = "eta_x";
static const char __pyx_k_eta_y[] = "eta_y";
static const char __pyx_k_eta_z[] = "eta_z";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_parms[] = "parms";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_twiss[] = "twiss";
static const char __pyx_k_Dipole[] = "Dipole";
static const char __pyx_k_Marker[] = "Marker";
static const char __pyx_k_beta_x[] = "beta_x";
static const char __pyx_k_beta_y[] = "beta_y";
static const char __pyx_k_beta_z[] = "beta_z";
static const char __pyx_k_etap_x[] = "etap_x";
static const char __pyx_k_etap_y[] = "etap_y";
static const char __pyx_k_etap_z[] = "etap_z";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_Element[] = "Element";
static const char __pyx_k_alpha_x[] = "alpha_x";
static const char __pyx_k_alpha_y[] = "alpha_y";
static const char __pyx_k_alpha_z[] = "alpha_z";
static const char __pyx_k_gamma_x[] = "gamma_x";
static const char __pyx_k_gamma_y[] = "gamma_y";
static const char __pyx_k_gamma_z[] = "gamma_z";
static const char __pyx_k_Octupole[] = "Octupole";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_Sextupole[] = "Sextupole";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_Quadrupole[] = "Quadrupole";
static const char __pyx_k_parameters[] = "parameters";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_Please_input_arg[] = "Please input arg!";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_Error_arg_was_input[] = "Error arg was input!";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static PyObject *__pyx_n_s_Dipole;
static PyObject *__pyx_n_u_Dipole;
static PyObject *__pyx_n_s_Drift;
static PyObject *__pyx_n_u_Drift;
static PyObject *__pyx_n_s_Element;
static PyObject *__pyx_kp_u_Error_arg_was_input;
static PyObject *__pyx_n_s_Marker;
static PyObject *__pyx_n_u_Marker;
static PyObject *__pyx_n_s_Octupole;
static PyObject *__pyx_n_u_Octupole;
static PyObject *__pyx_kp_u_Please_input_arg;
static PyObject *__pyx_n_s_Quadrupole;
static PyObject *__pyx_n_u_Quadrupole;
static PyObject *__pyx_n_s_Sextupole;
static PyObject *__pyx_n_u_Sextupole;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_u_alpha_x;
static PyObject *__pyx_n_u_alpha_y;
static PyObject *__pyx_n_u_alpha_z;
static PyObject *__pyx_n_u_angle;
static PyObject *__pyx_n_s_array;
static PyObject *__pyx_n_u_beta_x;
static PyObject *__pyx_n_u_beta_y;
static PyObject *__pyx_n_u_beta_z;
static PyObject *__pyx_n_s_class;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_u_e1;
static PyObject *__pyx_n_u_e2;
static PyObject *__pyx_n_u_eta_x;
static PyObject *__pyx_n_u_eta_y;
static PyObject *__pyx_n_u_eta_z;
static PyObject *__pyx_n_u_etap_x;
static PyObject *__pyx_n_u_etap_y;
static PyObject *__pyx_n_u_etap_z;
static PyObject *__pyx_n_u_gamma_x;
static PyObject *__pyx_n_u_gamma_y;
static PyObject *__pyx_n_u_gamma_z;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_n_u_k1;
static PyObject *__pyx_n_u_k2;
static PyObject *__pyx_n_s_keys;
static PyObject *__pyx_n_u_l;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_u_nu_x;
static PyObject *__pyx_n_u_nu_y;
static PyObject *__pyx_n_u_nu_z;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_n_u_parameters;
static PyObject *__pyx_n_s_parms;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_u_twiss;
static int __pyx_pf_4atpy_3src_6cython_8elements_7Element___cinit__(struct __pyx_obj_4atpy_3src_6cython_8elements_Element *__pyx_v_self, PyObject *__pyx_v_kargs); /* proto */
static int __pyx_pf_4atpy_3src_6cython_8elements_7Element_2__init__(struct __pyx_obj_4atpy_3src_6cython_8elements_Element *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_kargs); /* proto */
static void __pyx_pf_4atpy_3src_6cython_8elements_7Element_4__dealloc__(struct __pyx_obj_4atpy_3src_6cython_8elements_Element *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4atpy_3src_6cython_8elements_7Element_6copy(struct __pyx_obj_4atpy_3src_6cython_8elements_Element *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4atpy_3src_6cython_8elements_7Element_8__neg__(struct __pyx_obj_4atpy_3src_6cython_8elements_Element *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4atpy_3src_6cython_8elements_7Element_10get_value(struct __pyx_obj_4atpy_3src_6cython_8elements_Element *__pyx_v_self, PyObject *__pyx_v_parms); /* proto */
static PyObject *__pyx_pf_4atpy_3src_6cython_8elements_7Element_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4atpy_3src_6cython_8elements_Element *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4atpy_3src_6cython_8elements_7Element_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4atpy_3src_6cython_8elements_Element *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4atpy_3src_6cython_8elements_6Marker___init__(struct __pyx_obj_4atpy_3src_6cython_8elements_Marker *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_kargs); /* proto */
static PyObject *__pyx_pf_4atpy_3src_6cython_8elements_6Marker_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4atpy_3src_6cython_8elements_Marker *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4atpy_3src_6cython_8elements_6Marker_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4atpy_3src_6cython_8elements_Marker *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4atpy_3src_6cython_8elements_5Drift___init__(struct __pyx_obj_4atpy_3src_6cython_8elements_Drift *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_kargs); /* proto */
static PyObject *__pyx_pf_4atpy_3src_6cython_8elements_5Drift_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4atpy_3src_6cython_8elements_Drift *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4atpy_3src_6cython_8elements_5Drift_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4atpy_3src_6cython_8elements_Drift *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4atpy_3src_6cython_8elements_6Dipole___init__(struct __pyx_obj_4atpy_3src_6cython_8elements_Dipole *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_kargs); /* proto */
static PyObject *__pyx_pf_4atpy_3src_6cython_8elements_6Dipole_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4atpy_3src_6cython_8elements_Dipole *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4atpy_3src_6cython_8elements_6Dipole_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4atpy_3src_6cython_8elements_Dipole *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4atpy_3src_6cython_8elements_10Quadrupole___init__(struct __pyx_obj_4atpy_3src_6cython_8elements_Quadrupole *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_kargs); /* proto */
static PyObject *__pyx_pf_4atpy_3src_6cython_8elements_10Quadrupole_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4atpy_3src_6cython_8elements_Quadrupole *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4atpy_3src_6cython_8elements_10Quadrupole_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4atpy_3src_6cython_8elements_Quadrupole *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4atpy_3src_6cython_8elements_9Sextupole___init__(CYTHON_UNUSED struct __pyx_obj_4atpy_3src_6cython_8elements_Sextupole *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_kargs); /* proto */
static PyObject *__pyx_pf_4atpy_3src_6cython_8elements_9Sextupole_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4atpy_3src_6cython_8elements_Sextupole *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4atpy_3src_6cython_8elements_9Sextupole_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4atpy_3src_6cython_8elements_Sextupole *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4atpy_3src_6cython_8elements_8Octupole___init__(CYTHON_UNUSED struct __pyx_obj_4atpy_3src_6cython_8elements_Octupole *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_kargs); /* proto */
static PyObject *__pyx_pf_4atpy_3src_6cython_8elements_8Octupole_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4atpy_3src_6cython_8elements_Octupole *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4atpy_3src_6cython_8elements_8Octupole_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4atpy_3src_6cython_8elements_Octupole *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_4atpy_3src_6cython_8elements_Element(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4atpy_3src_6cython_8elements_Marker(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4atpy_3src_6cython_8elements_Drift(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4atpy_3src_6cython_8elements_Dipole(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4atpy_3src_6cython_8elements_Quadrupole(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4atpy_3src_6cython_8elements_Sextupole(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4atpy_3src_6cython_8elements_Octupole(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_keys = {0, &__pyx_n_s_keys, 0, 0, 0};
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_5;
static PyObject *__pyx_int_6;
static PyObject *__pyx_int_7;
static PyObject *__pyx_int_8;
static PyObject *__pyx_int_9;
static PyObject *__pyx_int_10;
static PyObject *__pyx_int_11;
static PyObject *__pyx_int_12;
static PyObject *__pyx_int_13;
static PyObject *__pyx_int_14;
static PyObject *__pyx_int_15;
static PyObject *__pyx_int_16;
static PyObject *__pyx_int_17;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
/* Late includes */

/* "atpy/src/cython/elements.pyx":3
 * import numpy as np
 * cdef class Element:
 *     def __cinit__(self,**kargs):             # <<<<<<<<<<<<<<
 *         cdef dict type2index = {'beta_x':0,'alpha_x':1,'gamma_x':2,'beta_y':3,'alpha_y':4,'gamma_y':5,
 *                                 'beta_z':6,'alpha_z':7,'gamma_z':8,'nu_x':9,'nu_y':10,'nu_z':11,
 */

/* Python wrapper */
static int __pyx_pw_4atpy_3src_6cython_8elements_7Element_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4atpy_3src_6cython_8elements_7Element_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  __pyx_v_kargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kargs);
  __pyx_r = __pyx_pf_4atpy_3src_6cython_8elements_7Element___cinit__(((struct __pyx_obj_4atpy_3src_6cython_8elements_Element *)__pyx_v_self), __pyx_v_kargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4atpy_3src_6cython_8elements_7Element___cinit__(struct __pyx_obj_4atpy_3src_6cython_8elements_Element *__pyx_v_self, PyObject *__pyx_v_kargs) {
  PyObject *__pyx_v_type2index = 0;
  PyObject *__pyx_v_parms2index = 0;
  PyObject *__pyx_v_class2type = 0;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  void *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  double __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "atpy/src/cython/elements.pyx":4
 * cdef class Element:
 *     def __cinit__(self,**kargs):
 *         cdef dict type2index = {'beta_x':0,'alpha_x':1,'gamma_x':2,'beta_y':3,'alpha_y':4,'gamma_y':5,             # <<<<<<<<<<<<<<
 *                                 'beta_z':6,'alpha_z':7,'gamma_z':8,'nu_x':9,'nu_y':10,'nu_z':11,
 *                                 'eta_x':12,'etap_x':13,'eta_y':14,'etap_y':15,'eta_z':16,'etap_z':17}
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(18); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_beta_x, __pyx_int_0) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_alpha_x, __pyx_int_1) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_gamma_x, __pyx_int_2) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_beta_y, __pyx_int_3) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_alpha_y, __pyx_int_4) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_gamma_y, __pyx_int_5) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_beta_z, __pyx_int_6) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_alpha_z, __pyx_int_7) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_gamma_z, __pyx_int_8) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_nu_x, __pyx_int_9) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_nu_y, __pyx_int_10) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_nu_z, __pyx_int_11) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_eta_x, __pyx_int_12) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_etap_x, __pyx_int_13) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_eta_y, __pyx_int_14) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_etap_y, __pyx_int_15) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_eta_z, __pyx_int_16) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_etap_z, __pyx_int_17) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __pyx_v_type2index = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "atpy/src/cython/elements.pyx":7
 *                                 'beta_z':6,'alpha_z':7,'gamma_z':8,'nu_x':9,'nu_y':10,'nu_z':11,
 *                                 'eta_x':12,'etap_x':13,'eta_y':14,'etap_y':15,'eta_z':16,'etap_z':17}
 *         cdef dict parms2index ={'l':0, 'angle':1, 'k1':2, 'k2':3, 'e1':4, 'e2':5}             # <<<<<<<<<<<<<<
 * 
 *         cdef dict class2type ={Marker:'Marker', Drift:'Drift', Dipole:'Dipole', Quadrupole:'Quadrupole', Sextupole:'Sextupole', Octupole:'Octupole'}
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_l, __pyx_int_0) < 0) __PYX_ERR(0, 7, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_angle, __pyx_int_1) < 0) __PYX_ERR(0, 7, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_k1, __pyx_int_2) < 0) __PYX_ERR(0, 7, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_k2, __pyx_int_3) < 0) __PYX_ERR(0, 7, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_e1, __pyx_int_4) < 0) __PYX_ERR(0, 7, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_e2, __pyx_int_5) < 0) __PYX_ERR(0, 7, __pyx_L1_error)
  __pyx_v_parms2index = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "atpy/src/cython/elements.pyx":9
 *         cdef dict parms2index ={'l':0, 'angle':1, 'k1':2, 'k2':3, 'e1':4, 'e2':5}
 * 
 *         cdef dict class2type ={Marker:'Marker', Drift:'Drift', Dipole:'Dipole', Quadrupole:'Quadrupole', Sextupole:'Sextupole', Octupole:'Octupole'}             # <<<<<<<<<<<<<<
 * 
 *         self.mem = Pool()
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_ptype_4atpy_3src_6cython_8elements_Marker), __pyx_n_u_Marker) < 0) __PYX_ERR(0, 9, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_ptype_4atpy_3src_6cython_8elements_Drift), __pyx_n_u_Drift) < 0) __PYX_ERR(0, 9, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_ptype_4atpy_3src_6cython_8elements_Dipole), __pyx_n_u_Dipole) < 0) __PYX_ERR(0, 9, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_ptype_4atpy_3src_6cython_8elements_Quadrupole), __pyx_n_u_Quadrupole) < 0) __PYX_ERR(0, 9, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_ptype_4atpy_3src_6cython_8elements_Sextupole), __pyx_n_u_Sextupole) < 0) __PYX_ERR(0, 9, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_ptype_4atpy_3src_6cython_8elements_Octupole), __pyx_n_u_Octupole) < 0) __PYX_ERR(0, 9, __pyx_L1_error)
  __pyx_v_class2type = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "atpy/src/cython/elements.pyx":11
 *         cdef dict class2type ={Marker:'Marker', Drift:'Drift', Dipole:'Dipole', Quadrupole:'Quadrupole', Sextupole:'Sextupole', Octupole:'Octupole'}
 * 
 *         self.mem = Pool()             # <<<<<<<<<<<<<<
 *         self.parms = <double*>self.mem.alloc(6,sizeof(double))
 *         if self.__class__ in class2type.keys():
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_5cymem_5cymem_Pool)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->mem);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->mem));
  __pyx_v_self->mem = ((struct __pyx_obj_5cymem_5cymem_Pool *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "atpy/src/cython/elements.pyx":12
 * 
 *         self.mem = Pool()
 *         self.parms = <double*>self.mem.alloc(6,sizeof(double))             # <<<<<<<<<<<<<<
 *         if self.__class__ in class2type.keys():
 *             self.element_type = class2type[self.__class__]
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_5cymem_5cymem_Pool *)__pyx_v_self->mem->__pyx_vtab)->alloc(__pyx_v_self->mem, 6, (sizeof(double))); if (unlikely(__pyx_t_2 == ((void *)NULL))) __PYX_ERR(0, 12, __pyx_L1_error)
  __pyx_v_self->parms = ((double *)__pyx_t_2);

  /* "atpy/src/cython/elements.pyx":13
 *         self.mem = Pool()
 *         self.parms = <double*>self.mem.alloc(6,sizeof(double))
 *         if self.__class__ in class2type.keys():             # <<<<<<<<<<<<<<
 *             self.element_type = class2type[self.__class__]
 *         for key,value in kargs.items():
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_class); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyDict_Keys(__pyx_v_class2type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_t_3, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "atpy/src/cython/elements.pyx":14
 *         self.parms = <double*>self.mem.alloc(6,sizeof(double))
 *         if self.__class__ in class2type.keys():
 *             self.element_type = class2type[self.__class__]             # <<<<<<<<<<<<<<
 *         for key,value in kargs.items():
 *             if key in type2index.keys():
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_class); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_class2type, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 14, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->element_type);
    __Pyx_DECREF(__pyx_v_self->element_type);
    __pyx_v_self->element_type = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "atpy/src/cython/elements.pyx":13
 *         self.mem = Pool()
 *         self.parms = <double*>self.mem.alloc(6,sizeof(double))
 *         if self.__class__ in class2type.keys():             # <<<<<<<<<<<<<<
 *             self.element_type = class2type[self.__class__]
 *         for key,value in kargs.items():
 */
  }

  /* "atpy/src/cython/elements.pyx":15
 *         if self.__class__ in class2type.keys():
 *             self.element_type = class2type[self.__class__]
 *         for key,value in kargs.items():             # <<<<<<<<<<<<<<
 *             if key in type2index.keys():
 *                 self.twiss[type2index[key]]= value
 */
  __pyx_t_6 = 0;
  __pyx_t_3 = __Pyx_dict_iterator(__pyx_v_kargs, 1, __pyx_n_s_items, (&__pyx_t_7), (&__pyx_t_8)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_3;
  __pyx_t_3 = 0;
  while (1) {
    __pyx_t_10 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_7, &__pyx_t_6, &__pyx_t_3, &__pyx_t_9, NULL, __pyx_t_8);
    if (unlikely(__pyx_t_10 == 0)) break;
    if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "atpy/src/cython/elements.pyx":16
 *             self.element_type = class2type[self.__class__]
 *         for key,value in kargs.items():
 *             if key in type2index.keys():             # <<<<<<<<<<<<<<
 *                 self.twiss[type2index[key]]= value
 *             elif key in parms2index.keys():
 */
    __pyx_t_9 = __Pyx_PyDict_Keys(__pyx_v_type2index); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 16, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_5 = (__Pyx_PySequence_ContainsTF(__pyx_v_key, __pyx_t_9, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 16, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_4 = (__pyx_t_5 != 0);
    if (__pyx_t_4) {

      /* "atpy/src/cython/elements.pyx":17
 *         for key,value in kargs.items():
 *             if key in type2index.keys():
 *                 self.twiss[type2index[key]]= value             # <<<<<<<<<<<<<<
 *             elif key in parms2index.keys():
 *                 self.parms[parms2index[key]]=value
 */
      __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 17, __pyx_L1_error)
      __pyx_t_9 = __Pyx_PyDict_GetItem(__pyx_v_type2index, __pyx_v_key); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 17, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 17, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      (__pyx_v_self->twiss[__pyx_t_12]) = __pyx_t_11;

      /* "atpy/src/cython/elements.pyx":16
 *             self.element_type = class2type[self.__class__]
 *         for key,value in kargs.items():
 *             if key in type2index.keys():             # <<<<<<<<<<<<<<
 *                 self.twiss[type2index[key]]= value
 *             elif key in parms2index.keys():
 */
      goto __pyx_L6;
    }

    /* "atpy/src/cython/elements.pyx":18
 *             if key in type2index.keys():
 *                 self.twiss[type2index[key]]= value
 *             elif key in parms2index.keys():             # <<<<<<<<<<<<<<
 *                 self.parms[parms2index[key]]=value
 *             else:
 */
    __pyx_t_9 = __Pyx_PyDict_Keys(__pyx_v_parms2index); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 18, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_4 = (__Pyx_PySequence_ContainsTF(__pyx_v_key, __pyx_t_9, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 18, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_5 = (__pyx_t_4 != 0);
    if (__pyx_t_5) {

      /* "atpy/src/cython/elements.pyx":19
 *                 self.twiss[type2index[key]]= value
 *             elif key in parms2index.keys():
 *                 self.parms[parms2index[key]]=value             # <<<<<<<<<<<<<<
 *             else:
 *                 print('Error arg was input!')
 */
      __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 19, __pyx_L1_error)
      __pyx_t_9 = __Pyx_PyDict_GetItem(__pyx_v_parms2index, __pyx_v_key); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 19, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 19, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      (__pyx_v_self->parms[__pyx_t_12]) = __pyx_t_11;

      /* "atpy/src/cython/elements.pyx":18
 *             if key in type2index.keys():
 *                 self.twiss[type2index[key]]= value
 *             elif key in parms2index.keys():             # <<<<<<<<<<<<<<
 *                 self.parms[parms2index[key]]=value
 *             else:
 */
      goto __pyx_L6;
    }

    /* "atpy/src/cython/elements.pyx":21
 *                 self.parms[parms2index[key]]=value
 *             else:
 *                 print('Error arg was input!')             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else*/ {
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 21, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __pyx_L6:;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "atpy/src/cython/elements.pyx":3
 * import numpy as np
 * cdef class Element:
 *     def __cinit__(self,**kargs):             # <<<<<<<<<<<<<<
 *         cdef dict type2index = {'beta_x':0,'alpha_x':1,'gamma_x':2,'beta_y':3,'alpha_y':4,'gamma_y':5,
 *                                 'beta_z':6,'alpha_z':7,'gamma_z':8,'nu_x':9,'nu_y':10,'nu_z':11,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("atpy.src.cython.elements.Element.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_type2index);
  __Pyx_XDECREF(__pyx_v_parms2index);
  __Pyx_XDECREF(__pyx_v_class2type);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "atpy/src/cython/elements.pyx":24
 * 
 * 
 *     def __init__(self,**kargs):             # <<<<<<<<<<<<<<
 *         self.elem = new CppElement()
 *         self.owner = True
 */

/* Python wrapper */
static int __pyx_pw_4atpy_3src_6cython_8elements_7Element_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4atpy_3src_6cython_8elements_7Element_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_kargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_r = __pyx_pf_4atpy_3src_6cython_8elements_7Element_2__init__(((struct __pyx_obj_4atpy_3src_6cython_8elements_Element *)__pyx_v_self), __pyx_v_kargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4atpy_3src_6cython_8elements_7Element_2__init__(struct __pyx_obj_4atpy_3src_6cython_8elements_Element *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_kargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "atpy/src/cython/elements.pyx":25
 * 
 *     def __init__(self,**kargs):
 *         self.elem = new CppElement()             # <<<<<<<<<<<<<<
 *         self.owner = True
 * 
 */
  __pyx_v_self->elem = new __pyx_t_4atpy_3src_3cpp_10cppelement_CppElement();

  /* "atpy/src/cython/elements.pyx":26
 *     def __init__(self,**kargs):
 *         self.elem = new CppElement()
 *         self.owner = True             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->owner = 1;

  /* "atpy/src/cython/elements.pyx":24
 * 
 * 
 *     def __init__(self,**kargs):             # <<<<<<<<<<<<<<
 *         self.elem = new CppElement()
 *         self.owner = True
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "atpy/src/cython/elements.pyx":28
 *         self.owner = True
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.elem is not NULL and self.owner:
 *             del self.elem
 */

/* Python wrapper */
static void __pyx_pw_4atpy_3src_6cython_8elements_7Element_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_4atpy_3src_6cython_8elements_7Element_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_4atpy_3src_6cython_8elements_7Element_4__dealloc__(((struct __pyx_obj_4atpy_3src_6cython_8elements_Element *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_4atpy_3src_6cython_8elements_7Element_4__dealloc__(struct __pyx_obj_4atpy_3src_6cython_8elements_Element *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "atpy/src/cython/elements.pyx":29
 * 
 *     def __dealloc__(self):
 *         if self.elem is not NULL and self.owner:             # <<<<<<<<<<<<<<
 *             del self.elem
 *         self.elem = NULL
 */
  __pyx_t_2 = ((__pyx_v_self->elem != NULL) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_self->owner != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "atpy/src/cython/elements.pyx":30
 *     def __dealloc__(self):
 *         if self.elem is not NULL and self.owner:
 *             del self.elem             # <<<<<<<<<<<<<<
 *         self.elem = NULL
 * 
 */
    delete __pyx_v_self->elem;

    /* "atpy/src/cython/elements.pyx":29
 * 
 *     def __dealloc__(self):
 *         if self.elem is not NULL and self.owner:             # <<<<<<<<<<<<<<
 *             del self.elem
 *         self.elem = NULL
 */
  }

  /* "atpy/src/cython/elements.pyx":31
 *         if self.elem is not NULL and self.owner:
 *             del self.elem
 *         self.elem = NULL             # <<<<<<<<<<<<<<
 * 
 *     def copy(self):
 */
  __pyx_v_self->elem = NULL;

  /* "atpy/src/cython/elements.pyx":28
 *         self.owner = True
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.elem is not NULL and self.owner:
 *             del self.elem
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "atpy/src/cython/elements.pyx":33
 *         self.elem = NULL
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cls = self.__class__
 *         cdef Element cp = cls.__new__(cls)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4atpy_3src_6cython_8elements_7Element_7copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4atpy_3src_6cython_8elements_7Element_7copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_pf_4atpy_3src_6cython_8elements_7Element_6copy(((struct __pyx_obj_4atpy_3src_6cython_8elements_Element *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4atpy_3src_6cython_8elements_7Element_6copy(struct __pyx_obj_4atpy_3src_6cython_8elements_Element *__pyx_v_self) {
  PyObject *__pyx_v_cls = NULL;
  struct __pyx_obj_4atpy_3src_6cython_8elements_Element *__pyx_v_cp = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  __pyx_t_4atpy_3src_3cpp_10cppelement_CppElement *__pyx_t_5;
  double *__pyx_t_6;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "atpy/src/cython/elements.pyx":34
 * 
 *     def copy(self):
 *         cls = self.__class__             # <<<<<<<<<<<<<<
 *         cdef Element cp = cls.__new__(cls)
 *         if cp.elem is not NULL:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_class); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_cls = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "atpy/src/cython/elements.pyx":35
 *     def copy(self):
 *         cls = self.__class__
 *         cdef Element cp = cls.__new__(cls)             # <<<<<<<<<<<<<<
 *         if cp.elem is not NULL:
 *             del cp.elem
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_cls, __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_cls) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_cls);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_4atpy_3src_6cython_8elements_Element))))) __PYX_ERR(0, 35, __pyx_L1_error)
  __pyx_v_cp = ((struct __pyx_obj_4atpy_3src_6cython_8elements_Element *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "atpy/src/cython/elements.pyx":36
 *         cls = self.__class__
 *         cdef Element cp = cls.__new__(cls)
 *         if cp.elem is not NULL:             # <<<<<<<<<<<<<<
 *             del cp.elem
 *         cp.elem = self.elem
 */
  __pyx_t_4 = ((__pyx_v_cp->elem != NULL) != 0);
  if (__pyx_t_4) {

    /* "atpy/src/cython/elements.pyx":37
 *         cdef Element cp = cls.__new__(cls)
 *         if cp.elem is not NULL:
 *             del cp.elem             # <<<<<<<<<<<<<<
 *         cp.elem = self.elem
 *         cp.parms= self.parms
 */
    delete __pyx_v_cp->elem;

    /* "atpy/src/cython/elements.pyx":36
 *         cls = self.__class__
 *         cdef Element cp = cls.__new__(cls)
 *         if cp.elem is not NULL:             # <<<<<<<<<<<<<<
 *             del cp.elem
 *         cp.elem = self.elem
 */
  }

  /* "atpy/src/cython/elements.pyx":38
 *         if cp.elem is not NULL:
 *             del cp.elem
 *         cp.elem = self.elem             # <<<<<<<<<<<<<<
 *         cp.parms= self.parms
 *         cp.owner = False
 */
  __pyx_t_5 = __pyx_v_self->elem;
  __pyx_v_cp->elem = __pyx_t_5;

  /* "atpy/src/cython/elements.pyx":39
 *             del cp.elem
 *         cp.elem = self.elem
 *         cp.parms= self.parms             # <<<<<<<<<<<<<<
 *         cp.owner = False
 *         return cp
 */
  __pyx_t_6 = __pyx_v_self->parms;
  __pyx_v_cp->parms = __pyx_t_6;

  /* "atpy/src/cython/elements.pyx":40
 *         cp.elem = self.elem
 *         cp.parms= self.parms
 *         cp.owner = False             # <<<<<<<<<<<<<<
 *         return cp
 * 
 */
  __pyx_v_cp->owner = 0;

  /* "atpy/src/cython/elements.pyx":41
 *         cp.parms= self.parms
 *         cp.owner = False
 *         return cp             # <<<<<<<<<<<<<<
 * 
 *     def __neg__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_cp));
  __pyx_r = ((PyObject *)__pyx_v_cp);
  goto __pyx_L0;

  /* "atpy/src/cython/elements.pyx":33
 *         self.elem = NULL
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cls = self.__class__
 *         cdef Element cp = cls.__new__(cls)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("atpy.src.cython.elements.Element.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cls);
  __Pyx_XDECREF((PyObject *)__pyx_v_cp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "atpy/src/cython/elements.pyx":43
 *         return cp
 * 
 *     def __neg__(self):             # <<<<<<<<<<<<<<
 *         cdef int[6] index = [1,4,7,13,15,17]
 *         cdef int i
 */

/* Python wrapper */
static PyObject *__pyx_pw_4atpy_3src_6cython_8elements_7Element_9__neg__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4atpy_3src_6cython_8elements_7Element_9__neg__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__neg__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4atpy_3src_6cython_8elements_7Element_8__neg__(((struct __pyx_obj_4atpy_3src_6cython_8elements_Element *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4atpy_3src_6cython_8elements_7Element_8__neg__(struct __pyx_obj_4atpy_3src_6cython_8elements_Element *__pyx_v_self) {
  int __pyx_v_index[6];
  int __pyx_v_i;
  PyObject *__pyx_v_cls = NULL;
  struct __pyx_obj_4atpy_3src_6cython_8elements_Element *__pyx_v_cp = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1[6];
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __pyx_t_4atpy_3src_3cpp_10cppelement_CppElement *__pyx_t_6;
  double *__pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("__neg__", 0);

  /* "atpy/src/cython/elements.pyx":44
 * 
 *     def __neg__(self):
 *         cdef int[6] index = [1,4,7,13,15,17]             # <<<<<<<<<<<<<<
 *         cdef int i
 *         cls = self.__class__
 */
  __pyx_t_1[0] = 1;
  __pyx_t_1[1] = 4;
  __pyx_t_1[2] = 7;
  __pyx_t_1[3] = 13;
  __pyx_t_1[4] = 15;
  __pyx_t_1[5] = 17;
  memcpy(&(__pyx_v_index[0]), __pyx_t_1, sizeof(__pyx_v_index[0]) * (6));

  /* "atpy/src/cython/elements.pyx":46
 *         cdef int[6] index = [1,4,7,13,15,17]
 *         cdef int i
 *         cls = self.__class__             # <<<<<<<<<<<<<<
 *         cdef Element cp = cls.__new__(cls)
 *         if cp.elem is not NULL:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_cls = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "atpy/src/cython/elements.pyx":47
 *         cdef int i
 *         cls = self.__class__
 *         cdef Element cp = cls.__new__(cls)             # <<<<<<<<<<<<<<
 *         if cp.elem is not NULL:
 *             del cp.elem
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_cls, __pyx_n_s_new); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_cls) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_cls);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_4atpy_3src_6cython_8elements_Element))))) __PYX_ERR(0, 47, __pyx_L1_error)
  __pyx_v_cp = ((struct __pyx_obj_4atpy_3src_6cython_8elements_Element *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "atpy/src/cython/elements.pyx":48
 *         cls = self.__class__
 *         cdef Element cp = cls.__new__(cls)
 *         if cp.elem is not NULL:             # <<<<<<<<<<<<<<
 *             del cp.elem
 *         cp.elem = self.elem
 */
  __pyx_t_5 = ((__pyx_v_cp->elem != NULL) != 0);
  if (__pyx_t_5) {

    /* "atpy/src/cython/elements.pyx":49
 *         cdef Element cp = cls.__new__(cls)
 *         if cp.elem is not NULL:
 *             del cp.elem             # <<<<<<<<<<<<<<
 *         cp.elem = self.elem
 *         cp.parms= self.parms
 */
    delete __pyx_v_cp->elem;

    /* "atpy/src/cython/elements.pyx":48
 *         cls = self.__class__
 *         cdef Element cp = cls.__new__(cls)
 *         if cp.elem is not NULL:             # <<<<<<<<<<<<<<
 *             del cp.elem
 *         cp.elem = self.elem
 */
  }

  /* "atpy/src/cython/elements.pyx":50
 *         if cp.elem is not NULL:
 *             del cp.elem
 *         cp.elem = self.elem             # <<<<<<<<<<<<<<
 *         cp.parms= self.parms
 *         for i in range(6):
 */
  __pyx_t_6 = __pyx_v_self->elem;
  __pyx_v_cp->elem = __pyx_t_6;

  /* "atpy/src/cython/elements.pyx":51
 *             del cp.elem
 *         cp.elem = self.elem
 *         cp.parms= self.parms             # <<<<<<<<<<<<<<
 *         for i in range(6):
 *             cp.twiss[index[i]] = -self.twiss[index[i]]
 */
  __pyx_t_7 = __pyx_v_self->parms;
  __pyx_v_cp->parms = __pyx_t_7;

  /* "atpy/src/cython/elements.pyx":52
 *         cp.elem = self.elem
 *         cp.parms= self.parms
 *         for i in range(6):             # <<<<<<<<<<<<<<
 *             cp.twiss[index[i]] = -self.twiss[index[i]]
 *         cp.owner = False
 */
  for (__pyx_t_8 = 0; __pyx_t_8 < 6; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "atpy/src/cython/elements.pyx":53
 *         cp.parms= self.parms
 *         for i in range(6):
 *             cp.twiss[index[i]] = -self.twiss[index[i]]             # <<<<<<<<<<<<<<
 *         cp.owner = False
 *         return cp
 */
    (__pyx_v_cp->twiss[(__pyx_v_index[__pyx_v_i])]) = (-(__pyx_v_self->twiss[(__pyx_v_index[__pyx_v_i])]));
  }

  /* "atpy/src/cython/elements.pyx":54
 *         for i in range(6):
 *             cp.twiss[index[i]] = -self.twiss[index[i]]
 *         cp.owner = False             # <<<<<<<<<<<<<<
 *         return cp
 * 
 */
  __pyx_v_cp->owner = 0;

  /* "atpy/src/cython/elements.pyx":55
 *             cp.twiss[index[i]] = -self.twiss[index[i]]
 *         cp.owner = False
 *         return cp             # <<<<<<<<<<<<<<
 * 
 *     cdef CppElement* bind2element(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_cp));
  __pyx_r = ((PyObject *)__pyx_v_cp);
  goto __pyx_L0;

  /* "atpy/src/cython/elements.pyx":43
 *         return cp
 * 
 *     def __neg__(self):             # <<<<<<<<<<<<<<
 *         cdef int[6] index = [1,4,7,13,15,17]
 *         cdef int i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("atpy.src.cython.elements.Element.__neg__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cls);
  __Pyx_XDECREF((PyObject *)__pyx_v_cp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "atpy/src/cython/elements.pyx":57
 *         return cp
 * 
 *     cdef CppElement* bind2element(self):             # <<<<<<<<<<<<<<
 *         return self.elem
 * 
 */

static __pyx_t_4atpy_3src_3cpp_10cppelement_CppElement *__pyx_f_4atpy_3src_6cython_8elements_7Element_bind2element(struct __pyx_obj_4atpy_3src_6cython_8elements_Element *__pyx_v_self) {
  __pyx_t_4atpy_3src_3cpp_10cppelement_CppElement *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("bind2element", 0);

  /* "atpy/src/cython/elements.pyx":58
 * 
 *     cdef CppElement* bind2element(self):
 *         return self.elem             # <<<<<<<<<<<<<<
 * 
 *     cdef double* bind2twiss(self):
 */
  __pyx_r = __pyx_v_self->elem;
  goto __pyx_L0;

  /* "atpy/src/cython/elements.pyx":57
 *         return cp
 * 
 *     cdef CppElement* bind2element(self):             # <<<<<<<<<<<<<<
 *         return self.elem
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "atpy/src/cython/elements.pyx":60
 *         return self.elem
 * 
 *     cdef double* bind2twiss(self):             # <<<<<<<<<<<<<<
 *         return &self.twiss[0]
 * 
 */

static double *__pyx_f_4atpy_3src_6cython_8elements_7Element_bind2twiss(struct __pyx_obj_4atpy_3src_6cython_8elements_Element *__pyx_v_self) {
  double *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("bind2twiss", 0);

  /* "atpy/src/cython/elements.pyx":61
 * 
 *     cdef double* bind2twiss(self):
 *         return &self.twiss[0]             # <<<<<<<<<<<<<<
 * 
 *     cdef double* bind2parameter(self):
 */
  __pyx_r = (&(__pyx_v_self->twiss[0]));
  goto __pyx_L0;

  /* "atpy/src/cython/elements.pyx":60
 *         return self.elem
 * 
 *     cdef double* bind2twiss(self):             # <<<<<<<<<<<<<<
 *         return &self.twiss[0]
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "atpy/src/cython/elements.pyx":63
 *         return &self.twiss[0]
 * 
 *     cdef double* bind2parameter(self):             # <<<<<<<<<<<<<<
 *         return self.parms
 * 
 */

static double *__pyx_f_4atpy_3src_6cython_8elements_7Element_bind2parameter(struct __pyx_obj_4atpy_3src_6cython_8elements_Element *__pyx_v_self) {
  double *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("bind2parameter", 0);

  /* "atpy/src/cython/elements.pyx":64
 * 
 *     cdef double* bind2parameter(self):
 *         return self.parms             # <<<<<<<<<<<<<<
 * 
 *     def get_value(self, str parms=None):
 */
  __pyx_r = __pyx_v_self->parms;
  goto __pyx_L0;

  /* "atpy/src/cython/elements.pyx":63
 *         return &self.twiss[0]
 * 
 *     cdef double* bind2parameter(self):             # <<<<<<<<<<<<<<
 *         return self.parms
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "atpy/src/cython/elements.pyx":66
 *         return self.parms
 * 
 *     def get_value(self, str parms=None):             # <<<<<<<<<<<<<<
 *         assert parms is not None, 'Please input arg!'
 *         cdef dict type2index = {'beta_x':0,'alpha_x':1,'gamma_x':2,'beta_y':3,'alpha_y':4,'gamma_y':5,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4atpy_3src_6cython_8elements_7Element_11get_value(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_4atpy_3src_6cython_8elements_7Element_11get_value(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_parms = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_value (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_parms,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject*)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parms);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_value") < 0)) __PYX_ERR(0, 66, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_parms = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_value", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 66, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("atpy.src.cython.elements.Element.get_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parms), (&PyUnicode_Type), 1, "parms", 1))) __PYX_ERR(0, 66, __pyx_L1_error)
  __pyx_r = __pyx_pf_4atpy_3src_6cython_8elements_7Element_10get_value(((struct __pyx_obj_4atpy_3src_6cython_8elements_Element *)__pyx_v_self), __pyx_v_parms);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4atpy_3src_6cython_8elements_7Element_10get_value(struct __pyx_obj_4atpy_3src_6cython_8elements_Element *__pyx_v_self, PyObject *__pyx_v_parms) {
  PyObject *__pyx_v_type2index = 0;
  PyObject *__pyx_v_parms2index = 0;
  long __pyx_7genexpr__pyx_v_i;
  long __pyx_8genexpr1__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  long __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("get_value", 0);

  /* "atpy/src/cython/elements.pyx":67
 * 
 *     def get_value(self, str parms=None):
 *         assert parms is not None, 'Please input arg!'             # <<<<<<<<<<<<<<
 *         cdef dict type2index = {'beta_x':0,'alpha_x':1,'gamma_x':2,'beta_y':3,'alpha_y':4,'gamma_y':5,
 *                                 'beta_z':6,'alpha_z':7,'gamma_z':8,'nu_x':9,'nu_y':10,'nu_z':11,
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (__pyx_v_parms != ((PyObject*)Py_None));
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_Please_input_arg);
      __PYX_ERR(0, 67, __pyx_L1_error)
    }
  }
  #endif

  /* "atpy/src/cython/elements.pyx":68
 *     def get_value(self, str parms=None):
 *         assert parms is not None, 'Please input arg!'
 *         cdef dict type2index = {'beta_x':0,'alpha_x':1,'gamma_x':2,'beta_y':3,'alpha_y':4,'gamma_y':5,             # <<<<<<<<<<<<<<
 *                                 'beta_z':6,'alpha_z':7,'gamma_z':8,'nu_x':9,'nu_y':10,'nu_z':11,
 *                                 'eta_x':12,'etap_x':13,'eta_y':14,'etap_y':15,'eta_z':16,'etap_z':17}
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(18); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_beta_x, __pyx_int_0) < 0) __PYX_ERR(0, 68, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_alpha_x, __pyx_int_1) < 0) __PYX_ERR(0, 68, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_gamma_x, __pyx_int_2) < 0) __PYX_ERR(0, 68, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_beta_y, __pyx_int_3) < 0) __PYX_ERR(0, 68, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_alpha_y, __pyx_int_4) < 0) __PYX_ERR(0, 68, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_gamma_y, __pyx_int_5) < 0) __PYX_ERR(0, 68, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_beta_z, __pyx_int_6) < 0) __PYX_ERR(0, 68, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_alpha_z, __pyx_int_7) < 0) __PYX_ERR(0, 68, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_gamma_z, __pyx_int_8) < 0) __PYX_ERR(0, 68, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_nu_x, __pyx_int_9) < 0) __PYX_ERR(0, 68, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_nu_y, __pyx_int_10) < 0) __PYX_ERR(0, 68, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_nu_z, __pyx_int_11) < 0) __PYX_ERR(0, 68, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_eta_x, __pyx_int_12) < 0) __PYX_ERR(0, 68, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_etap_x, __pyx_int_13) < 0) __PYX_ERR(0, 68, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_eta_y, __pyx_int_14) < 0) __PYX_ERR(0, 68, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_etap_y, __pyx_int_15) < 0) __PYX_ERR(0, 68, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_eta_z, __pyx_int_16) < 0) __PYX_ERR(0, 68, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_etap_z, __pyx_int_17) < 0) __PYX_ERR(0, 68, __pyx_L1_error)
  __pyx_v_type2index = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "atpy/src/cython/elements.pyx":71
 *                                 'beta_z':6,'alpha_z':7,'gamma_z':8,'nu_x':9,'nu_y':10,'nu_z':11,
 *                                 'eta_x':12,'etap_x':13,'eta_y':14,'etap_y':15,'eta_z':16,'etap_z':17}
 *         cdef dict parms2index ={'l':0, 'angle':1, 'k1':2, 'k2':3, 'e1':4, 'e2':5}             # <<<<<<<<<<<<<<
 *         if parms in type2index.keys():
 *             return self.twiss[type2index[parms]]
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_l, __pyx_int_0) < 0) __PYX_ERR(0, 71, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_angle, __pyx_int_1) < 0) __PYX_ERR(0, 71, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_k1, __pyx_int_2) < 0) __PYX_ERR(0, 71, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_k2, __pyx_int_3) < 0) __PYX_ERR(0, 71, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_e1, __pyx_int_4) < 0) __PYX_ERR(0, 71, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_e2, __pyx_int_5) < 0) __PYX_ERR(0, 71, __pyx_L1_error)
  __pyx_v_parms2index = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "atpy/src/cython/elements.pyx":72
 *                                 'eta_x':12,'etap_x':13,'eta_y':14,'etap_y':15,'eta_z':16,'etap_z':17}
 *         cdef dict parms2index ={'l':0, 'angle':1, 'k1':2, 'k2':3, 'e1':4, 'e2':5}
 *         if parms in type2index.keys():             # <<<<<<<<<<<<<<
 *             return self.twiss[type2index[parms]]
 *         elif parms in parms2index.keys():
 */
  __pyx_t_2 = __Pyx_PyDict_Keys(__pyx_v_type2index); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_v_parms, __pyx_t_2, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = (__pyx_t_1 != 0);
  if (__pyx_t_3) {

    /* "atpy/src/cython/elements.pyx":73
 *         cdef dict parms2index ={'l':0, 'angle':1, 'k1':2, 'k2':3, 'e1':4, 'e2':5}
 *         if parms in type2index.keys():
 *             return self.twiss[type2index[parms]]             # <<<<<<<<<<<<<<
 *         elif parms in parms2index.keys():
 *             return self.parms[parms2index[parms]]
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_type2index, __pyx_v_parms); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 73, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyIndex_AsSsize_t(__pyx_t_2); if (unlikely((__pyx_t_4 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 73, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v_self->twiss[__pyx_t_4])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 73, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "atpy/src/cython/elements.pyx":72
 *                                 'eta_x':12,'etap_x':13,'eta_y':14,'etap_y':15,'eta_z':16,'etap_z':17}
 *         cdef dict parms2index ={'l':0, 'angle':1, 'k1':2, 'k2':3, 'e1':4, 'e2':5}
 *         if parms in type2index.keys():             # <<<<<<<<<<<<<<
 *             return self.twiss[type2index[parms]]
 *         elif parms in parms2index.keys():
 */
  }

  /* "atpy/src/cython/elements.pyx":74
 *         if parms in type2index.keys():
 *             return self.twiss[type2index[parms]]
 *         elif parms in parms2index.keys():             # <<<<<<<<<<<<<<
 *             return self.parms[parms2index[parms]]
 *         elif parms == 'twiss':
 */
  __pyx_t_2 = __Pyx_PyDict_Keys(__pyx_v_parms2index); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PySequence_ContainsTF(__pyx_v_parms, __pyx_t_2, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = (__pyx_t_3 != 0);
  if (__pyx_t_1) {

    /* "atpy/src/cython/elements.pyx":75
 *             return self.twiss[type2index[parms]]
 *         elif parms in parms2index.keys():
 *             return self.parms[parms2index[parms]]             # <<<<<<<<<<<<<<
 *         elif parms == 'twiss':
 *             return np.array([self.twiss[i] for i in range(18)])
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_parms2index, __pyx_v_parms); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyIndex_AsSsize_t(__pyx_t_2); if (unlikely((__pyx_t_4 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v_self->parms[__pyx_t_4])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "atpy/src/cython/elements.pyx":74
 *         if parms in type2index.keys():
 *             return self.twiss[type2index[parms]]
 *         elif parms in parms2index.keys():             # <<<<<<<<<<<<<<
 *             return self.parms[parms2index[parms]]
 *         elif parms == 'twiss':
 */
  }

  /* "atpy/src/cython/elements.pyx":76
 *         elif parms in parms2index.keys():
 *             return self.parms[parms2index[parms]]
 *         elif parms == 'twiss':             # <<<<<<<<<<<<<<
 *             return np.array([self.twiss[i] for i in range(18)])
 *         elif parms == 'parameters':
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_parms, __pyx_n_u_twiss, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 76, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_1 != 0);
  if (__pyx_t_3) {

    /* "atpy/src/cython/elements.pyx":77
 *             return self.parms[parms2index[parms]]
 *         elif parms == 'twiss':
 *             return np.array([self.twiss[i] for i in range(18)])             # <<<<<<<<<<<<<<
 *         elif parms == 'parameters':
 *             return [self.element_type]+[self.parms[i] for i in range(6)]
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_array); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    { /* enter inner scope */
      __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 77, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      for (__pyx_t_7 = 0; __pyx_t_7 < 18; __pyx_t_7+=1) {
        __pyx_7genexpr__pyx_v_i = __pyx_t_7;
        __pyx_t_8 = PyFloat_FromDouble((__pyx_v_self->twiss[__pyx_7genexpr__pyx_v_i])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 77, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_8))) __PYX_ERR(0, 77, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    } /* exit inner scope */
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_2 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_8, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "atpy/src/cython/elements.pyx":76
 *         elif parms in parms2index.keys():
 *             return self.parms[parms2index[parms]]
 *         elif parms == 'twiss':             # <<<<<<<<<<<<<<
 *             return np.array([self.twiss[i] for i in range(18)])
 *         elif parms == 'parameters':
 */
  }

  /* "atpy/src/cython/elements.pyx":78
 *         elif parms == 'twiss':
 *             return np.array([self.twiss[i] for i in range(18)])
 *         elif parms == 'parameters':             # <<<<<<<<<<<<<<
 *             return [self.element_type]+[self.parms[i] for i in range(6)]
 *         else:
 */
  __pyx_t_3 = (__Pyx_PyUnicode_Equals(__pyx_v_parms, __pyx_n_u_parameters, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 78, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_3 != 0);
  if (__pyx_t_1) {

    /* "atpy/src/cython/elements.pyx":79
 *             return np.array([self.twiss[i] for i in range(18)])
 *         elif parms == 'parameters':
 *             return [self.element_type]+[self.parms[i] for i in range(6)]             # <<<<<<<<<<<<<<
 *         else:
 *             print('Error arg was input!')
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_self->element_type);
    __Pyx_GIVEREF(__pyx_v_self->element_type);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_v_self->element_type);
    { /* enter inner scope */
      __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 79, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      for (__pyx_t_7 = 0; __pyx_t_7 < 6; __pyx_t_7+=1) {
        __pyx_8genexpr1__pyx_v_i = __pyx_t_7;
        __pyx_t_5 = PyFloat_FromDouble((__pyx_v_self->parms[__pyx_8genexpr1__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 79, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_6, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 79, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
    } /* exit inner scope */
    __pyx_t_5 = PyNumber_Add(__pyx_t_2, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "atpy/src/cython/elements.pyx":78
 *         elif parms == 'twiss':
 *             return np.array([self.twiss[i] for i in range(18)])
 *         elif parms == 'parameters':             # <<<<<<<<<<<<<<
 *             return [self.element_type]+[self.parms[i] for i in range(6)]
 *         else:
 */
  }

  /* "atpy/src/cython/elements.pyx":81
 *             return [self.element_type]+[self.parms[i] for i in range(6)]
 *         else:
 *             print('Error arg was input!')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "atpy/src/cython/elements.pyx":66
 *         return self.parms
 * 
 *     def get_value(self, str parms=None):             # <<<<<<<<<<<<<<
 *         assert parms is not None, 'Please input arg!'
 *         cdef dict type2index = {'beta_x':0,'alpha_x':1,'gamma_x':2,'beta_y':3,'alpha_y':4,'gamma_y':5,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("atpy.src.cython.elements.Element.get_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_type2index);
  __Pyx_XDECREF(__pyx_v_parms2index);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4atpy_3src_6cython_8elements_7Element_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4atpy_3src_6cython_8elements_7Element_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4atpy_3src_6cython_8elements_7Element_12__reduce_cython__(((struct __pyx_obj_4atpy_3src_6cython_8elements_Element *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4atpy_3src_6cython_8elements_7Element_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4atpy_3src_6cython_8elements_Element *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("atpy.src.cython.elements.Element.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4atpy_3src_6cython_8elements_7Element_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_4atpy_3src_6cython_8elements_7Element_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4atpy_3src_6cython_8elements_7Element_14__setstate_cython__(((struct __pyx_obj_4atpy_3src_6cython_8elements_Element *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4atpy_3src_6cython_8elements_7Element_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4atpy_3src_6cython_8elements_Element *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("atpy.src.cython.elements.Element.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "atpy/src/cython/elements.pyx":87
 * cdef class Marker(Element):
 * 
 *     def __init__(self, **kargs):             # <<<<<<<<<<<<<<
 *         self.elem = new CppMarker()
 *         self.owner = True
 */

/* Python wrapper */
static int __pyx_pw_4atpy_3src_6cython_8elements_6Marker_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4atpy_3src_6cython_8elements_6Marker_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_kargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_r = __pyx_pf_4atpy_3src_6cython_8elements_6Marker___init__(((struct __pyx_obj_4atpy_3src_6cython_8elements_Marker *)__pyx_v_self), __pyx_v_kargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4atpy_3src_6cython_8elements_6Marker___init__(struct __pyx_obj_4atpy_3src_6cython_8elements_Marker *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_kargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "atpy/src/cython/elements.pyx":88
 * 
 *     def __init__(self, **kargs):
 *         self.elem = new CppMarker()             # <<<<<<<<<<<<<<
 *         self.owner = True
 * 
 */
  __pyx_v_self->__pyx_base.elem = new __pyx_t_4atpy_3src_3cpp_9cppmarker_CppMarker();

  /* "atpy/src/cython/elements.pyx":89
 *     def __init__(self, **kargs):
 *         self.elem = new CppMarker()
 *         self.owner = True             # <<<<<<<<<<<<<<
 * 
 * cdef class Drift(Element):
 */
  __pyx_v_self->__pyx_base.owner = 1;

  /* "atpy/src/cython/elements.pyx":87
 * cdef class Marker(Element):
 * 
 *     def __init__(self, **kargs):             # <<<<<<<<<<<<<<
 *         self.elem = new CppMarker()
 *         self.owner = True
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4atpy_3src_6cython_8elements_6Marker_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4atpy_3src_6cython_8elements_6Marker_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4atpy_3src_6cython_8elements_6Marker_2__reduce_cython__(((struct __pyx_obj_4atpy_3src_6cython_8elements_Marker *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4atpy_3src_6cython_8elements_6Marker_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4atpy_3src_6cython_8elements_Marker *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("atpy.src.cython.elements.Marker.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4atpy_3src_6cython_8elements_6Marker_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_4atpy_3src_6cython_8elements_6Marker_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4atpy_3src_6cython_8elements_6Marker_4__setstate_cython__(((struct __pyx_obj_4atpy_3src_6cython_8elements_Marker *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4atpy_3src_6cython_8elements_6Marker_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4atpy_3src_6cython_8elements_Marker *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("atpy.src.cython.elements.Marker.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "atpy/src/cython/elements.pyx":92
 * 
 * cdef class Drift(Element):
 *     def __init__(self,**kargs):             # <<<<<<<<<<<<<<
 *         self.elem = new CppDrift(self.parms)
 *         self.owner = True
 */

/* Python wrapper */
static int __pyx_pw_4atpy_3src_6cython_8elements_5Drift_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4atpy_3src_6cython_8elements_5Drift_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_kargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_r = __pyx_pf_4atpy_3src_6cython_8elements_5Drift___init__(((struct __pyx_obj_4atpy_3src_6cython_8elements_Drift *)__pyx_v_self), __pyx_v_kargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4atpy_3src_6cython_8elements_5Drift___init__(struct __pyx_obj_4atpy_3src_6cython_8elements_Drift *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_kargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "atpy/src/cython/elements.pyx":93
 * cdef class Drift(Element):
 *     def __init__(self,**kargs):
 *         self.elem = new CppDrift(self.parms)             # <<<<<<<<<<<<<<
 *         self.owner = True
 * 
 */
  __pyx_v_self->__pyx_base.elem = new __pyx_t_4atpy_3src_3cpp_8cppdrift_CppDrift(__pyx_v_self->__pyx_base.parms);

  /* "atpy/src/cython/elements.pyx":94
 *     def __init__(self,**kargs):
 *         self.elem = new CppDrift(self.parms)
 *         self.owner = True             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->__pyx_base.owner = 1;

  /* "atpy/src/cython/elements.pyx":92
 * 
 * cdef class Drift(Element):
 *     def __init__(self,**kargs):             # <<<<<<<<<<<<<<
 *         self.elem = new CppDrift(self.parms)
 *         self.owner = True
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4atpy_3src_6cython_8elements_5Drift_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4atpy_3src_6cython_8elements_5Drift_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4atpy_3src_6cython_8elements_5Drift_2__reduce_cython__(((struct __pyx_obj_4atpy_3src_6cython_8elements_Drift *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4atpy_3src_6cython_8elements_5Drift_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4atpy_3src_6cython_8elements_Drift *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("atpy.src.cython.elements.Drift.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4atpy_3src_6cython_8elements_5Drift_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_4atpy_3src_6cython_8elements_5Drift_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4atpy_3src_6cython_8elements_5Drift_4__setstate_cython__(((struct __pyx_obj_4atpy_3src_6cython_8elements_Drift *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4atpy_3src_6cython_8elements_5Drift_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4atpy_3src_6cython_8elements_Drift *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("atpy.src.cython.elements.Drift.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "atpy/src/cython/elements.pyx":98
 * 
 * cdef class Dipole(Element):
 *     def __init__(self,**kargs):             # <<<<<<<<<<<<<<
 *         self.elem = new CppDipole(self.parms)
 *         self.owner = True
 */

/* Python wrapper */
static int __pyx_pw_4atpy_3src_6cython_8elements_6Dipole_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4atpy_3src_6cython_8elements_6Dipole_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_kargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_r = __pyx_pf_4atpy_3src_6cython_8elements_6Dipole___init__(((struct __pyx_obj_4atpy_3src_6cython_8elements_Dipole *)__pyx_v_self), __pyx_v_kargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4atpy_3src_6cython_8elements_6Dipole___init__(struct __pyx_obj_4atpy_3src_6cython_8elements_Dipole *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_kargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "atpy/src/cython/elements.pyx":99
 * cdef class Dipole(Element):
 *     def __init__(self,**kargs):
 *         self.elem = new CppDipole(self.parms)             # <<<<<<<<<<<<<<
 *         self.owner = True
 * 
 */
  __pyx_v_self->__pyx_base.elem = new __pyx_t_4atpy_3src_3cpp_9cppdipole_CppDipole(__pyx_v_self->__pyx_base.parms);

  /* "atpy/src/cython/elements.pyx":100
 *     def __init__(self,**kargs):
 *         self.elem = new CppDipole(self.parms)
 *         self.owner = True             # <<<<<<<<<<<<<<
 * 
 * cdef class Quadrupole(Element):
 */
  __pyx_v_self->__pyx_base.owner = 1;

  /* "atpy/src/cython/elements.pyx":98
 * 
 * cdef class Dipole(Element):
 *     def __init__(self,**kargs):             # <<<<<<<<<<<<<<
 *         self.elem = new CppDipole(self.parms)
 *         self.owner = True
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4atpy_3src_6cython_8elements_6Dipole_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4atpy_3src_6cython_8elements_6Dipole_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4atpy_3src_6cython_8elements_6Dipole_2__reduce_cython__(((struct __pyx_obj_4atpy_3src_6cython_8elements_Dipole *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4atpy_3src_6cython_8elements_6Dipole_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4atpy_3src_6cython_8elements_Dipole *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("atpy.src.cython.elements.Dipole.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4atpy_3src_6cython_8elements_6Dipole_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_4atpy_3src_6cython_8elements_6Dipole_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4atpy_3src_6cython_8elements_6Dipole_4__setstate_cython__(((struct __pyx_obj_4atpy_3src_6cython_8elements_Dipole *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4atpy_3src_6cython_8elements_6Dipole_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4atpy_3src_6cython_8elements_Dipole *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("atpy.src.cython.elements.Dipole.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "atpy/src/cython/elements.pyx":103
 * 
 * cdef class Quadrupole(Element):
 *     def __init__(self,**kargs):             # <<<<<<<<<<<<<<
 *         self.elem = new CppQuadrupole(self.parms)
 *         self.owner = True
 */

/* Python wrapper */
static int __pyx_pw_4atpy_3src_6cython_8elements_10Quadrupole_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4atpy_3src_6cython_8elements_10Quadrupole_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_kargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_r = __pyx_pf_4atpy_3src_6cython_8elements_10Quadrupole___init__(((struct __pyx_obj_4atpy_3src_6cython_8elements_Quadrupole *)__pyx_v_self), __pyx_v_kargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4atpy_3src_6cython_8elements_10Quadrupole___init__(struct __pyx_obj_4atpy_3src_6cython_8elements_Quadrupole *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_kargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "atpy/src/cython/elements.pyx":104
 * cdef class Quadrupole(Element):
 *     def __init__(self,**kargs):
 *         self.elem = new CppQuadrupole(self.parms)             # <<<<<<<<<<<<<<
 *         self.owner = True
 * 
 */
  __pyx_v_self->__pyx_base.elem = new __pyx_t_4atpy_3src_3cpp_13cppquadrupole_CppQuadrupole(__pyx_v_self->__pyx_base.parms);

  /* "atpy/src/cython/elements.pyx":105
 *     def __init__(self,**kargs):
 *         self.elem = new CppQuadrupole(self.parms)
 *         self.owner = True             # <<<<<<<<<<<<<<
 * 
 * cdef class Sextupole(Element):
 */
  __pyx_v_self->__pyx_base.owner = 1;

  /* "atpy/src/cython/elements.pyx":103
 * 
 * cdef class Quadrupole(Element):
 *     def __init__(self,**kargs):             # <<<<<<<<<<<<<<
 *         self.elem = new CppQuadrupole(self.parms)
 *         self.owner = True
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4atpy_3src_6cython_8elements_10Quadrupole_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4atpy_3src_6cython_8elements_10Quadrupole_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4atpy_3src_6cython_8elements_10Quadrupole_2__reduce_cython__(((struct __pyx_obj_4atpy_3src_6cython_8elements_Quadrupole *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4atpy_3src_6cython_8elements_10Quadrupole_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4atpy_3src_6cython_8elements_Quadrupole *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("atpy.src.cython.elements.Quadrupole.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4atpy_3src_6cython_8elements_10Quadrupole_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_4atpy_3src_6cython_8elements_10Quadrupole_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4atpy_3src_6cython_8elements_10Quadrupole_4__setstate_cython__(((struct __pyx_obj_4atpy_3src_6cython_8elements_Quadrupole *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4atpy_3src_6cython_8elements_10Quadrupole_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4atpy_3src_6cython_8elements_Quadrupole *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("atpy.src.cython.elements.Quadrupole.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "atpy/src/cython/elements.pyx":108
 * 
 * cdef class Sextupole(Element):
 *     def __init__(self,**kargs):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static int __pyx_pw_4atpy_3src_6cython_8elements_9Sextupole_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4atpy_3src_6cython_8elements_9Sextupole_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_kargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_r = __pyx_pf_4atpy_3src_6cython_8elements_9Sextupole___init__(((struct __pyx_obj_4atpy_3src_6cython_8elements_Sextupole *)__pyx_v_self), __pyx_v_kargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4atpy_3src_6cython_8elements_9Sextupole___init__(CYTHON_UNUSED struct __pyx_obj_4atpy_3src_6cython_8elements_Sextupole *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_kargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4atpy_3src_6cython_8elements_9Sextupole_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4atpy_3src_6cython_8elements_9Sextupole_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4atpy_3src_6cython_8elements_9Sextupole_2__reduce_cython__(((struct __pyx_obj_4atpy_3src_6cython_8elements_Sextupole *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4atpy_3src_6cython_8elements_9Sextupole_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4atpy_3src_6cython_8elements_Sextupole *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("atpy.src.cython.elements.Sextupole.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4atpy_3src_6cython_8elements_9Sextupole_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_4atpy_3src_6cython_8elements_9Sextupole_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4atpy_3src_6cython_8elements_9Sextupole_4__setstate_cython__(((struct __pyx_obj_4atpy_3src_6cython_8elements_Sextupole *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4atpy_3src_6cython_8elements_9Sextupole_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4atpy_3src_6cython_8elements_Sextupole *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("atpy.src.cython.elements.Sextupole.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "atpy/src/cython/elements.pyx":112
 * 
 * cdef class Octupole(Element):
 *     def __init__(self,**kargs):             # <<<<<<<<<<<<<<
 *         pass
 */

/* Python wrapper */
static int __pyx_pw_4atpy_3src_6cython_8elements_8Octupole_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4atpy_3src_6cython_8elements_8Octupole_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_kargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_r = __pyx_pf_4atpy_3src_6cython_8elements_8Octupole___init__(((struct __pyx_obj_4atpy_3src_6cython_8elements_Octupole *)__pyx_v_self), __pyx_v_kargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4atpy_3src_6cython_8elements_8Octupole___init__(CYTHON_UNUSED struct __pyx_obj_4atpy_3src_6cython_8elements_Octupole *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_kargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4atpy_3src_6cython_8elements_8Octupole_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4atpy_3src_6cython_8elements_8Octupole_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4atpy_3src_6cython_8elements_8Octupole_2__reduce_cython__(((struct __pyx_obj_4atpy_3src_6cython_8elements_Octupole *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4atpy_3src_6cython_8elements_8Octupole_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4atpy_3src_6cython_8elements_Octupole *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("atpy.src.cython.elements.Octupole.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4atpy_3src_6cython_8elements_8Octupole_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_4atpy_3src_6cython_8elements_8Octupole_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4atpy_3src_6cython_8elements_8Octupole_4__setstate_cython__(((struct __pyx_obj_4atpy_3src_6cython_8elements_Octupole *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4atpy_3src_6cython_8elements_8Octupole_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4atpy_3src_6cython_8elements_Octupole *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("atpy.src.cython.elements.Octupole.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpp/cppelement.pxd":15
 *     double T[6][6]
 * 
 *     __init__():             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

void __pyx_t_4atpy_3src_3cpp_10cppelement_CppElement::__pyx_f___init__CppElement(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("<init>", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cpp/cppelement.pxd":18
 *         pass
 * 
 *     inline void init_matrixM():             # <<<<<<<<<<<<<<
 *         this.M = [[1., 0., 0., 0., 0., 0.],
 *                   [0., 1., 0., 0., 0., 0.],
 */

void __pyx_t_4atpy_3src_3cpp_10cppelement_CppElement::init_matrixM(void) {
  __Pyx_RefNannyDeclarations
  double __pyx_t_1[6];
  double __pyx_t_2[6];
  double __pyx_t_3[6];
  double __pyx_t_4[6];
  double __pyx_t_5[6];
  double __pyx_t_6[6];
  double __pyx_t_7[6][6];
  __Pyx_RefNannySetupContext("init_matrixM", 0);

  /* "cpp/cppelement.pxd":19
 * 
 *     inline void init_matrixM():
 *         this.M = [[1., 0., 0., 0., 0., 0.],             # <<<<<<<<<<<<<<
 *                   [0., 1., 0., 0., 0., 0.],
 *                   [0., 0., 1., 0., 0., 0.],
 */
  __pyx_t_1[0] = 1.;
  __pyx_t_1[1] = 0.;
  __pyx_t_1[2] = 0.;
  __pyx_t_1[3] = 0.;
  __pyx_t_1[4] = 0.;
  __pyx_t_1[5] = 0.;

  /* "cpp/cppelement.pxd":20
 *     inline void init_matrixM():
 *         this.M = [[1., 0., 0., 0., 0., 0.],
 *                   [0., 1., 0., 0., 0., 0.],             # <<<<<<<<<<<<<<
 *                   [0., 0., 1., 0., 0., 0.],
 *                   [0., 0., 0., 1., 0., 0.],
 */
  __pyx_t_2[0] = 0.;
  __pyx_t_2[1] = 1.;
  __pyx_t_2[2] = 0.;
  __pyx_t_2[3] = 0.;
  __pyx_t_2[4] = 0.;
  __pyx_t_2[5] = 0.;

  /* "cpp/cppelement.pxd":21
 *         this.M = [[1., 0., 0., 0., 0., 0.],
 *                   [0., 1., 0., 0., 0., 0.],
 *                   [0., 0., 1., 0., 0., 0.],             # <<<<<<<<<<<<<<
 *                   [0., 0., 0., 1., 0., 0.],
 *                   [0., 0., 0., 0., 1., 0.],
 */
  __pyx_t_3[0] = 0.;
  __pyx_t_3[1] = 0.;
  __pyx_t_3[2] = 1.;
  __pyx_t_3[3] = 0.;
  __pyx_t_3[4] = 0.;
  __pyx_t_3[5] = 0.;

  /* "cpp/cppelement.pxd":22
 *                   [0., 1., 0., 0., 0., 0.],
 *                   [0., 0., 1., 0., 0., 0.],
 *                   [0., 0., 0., 1., 0., 0.],             # <<<<<<<<<<<<<<
 *                   [0., 0., 0., 0., 1., 0.],
 *                   [0., 0., 0., 0., 0., 1.]]
 */
  __pyx_t_4[0] = 0.;
  __pyx_t_4[1] = 0.;
  __pyx_t_4[2] = 0.;
  __pyx_t_4[3] = 1.;
  __pyx_t_4[4] = 0.;
  __pyx_t_4[5] = 0.;

  /* "cpp/cppelement.pxd":23
 *                   [0., 0., 1., 0., 0., 0.],
 *                   [0., 0., 0., 1., 0., 0.],
 *                   [0., 0., 0., 0., 1., 0.],             # <<<<<<<<<<<<<<
 *                   [0., 0., 0., 0., 0., 1.]]
 * 
 */
  __pyx_t_5[0] = 0.;
  __pyx_t_5[1] = 0.;
  __pyx_t_5[2] = 0.;
  __pyx_t_5[3] = 0.;
  __pyx_t_5[4] = 1.;
  __pyx_t_5[5] = 0.;

  /* "cpp/cppelement.pxd":24
 *                   [0., 0., 0., 1., 0., 0.],
 *                   [0., 0., 0., 0., 1., 0.],
 *                   [0., 0., 0., 0., 0., 1.]]             # <<<<<<<<<<<<<<
 * 
 *     inline void update_matrixM()nogil:
 */
  __pyx_t_6[0] = 0.;
  __pyx_t_6[1] = 0.;
  __pyx_t_6[2] = 0.;
  __pyx_t_6[3] = 0.;
  __pyx_t_6[4] = 0.;
  __pyx_t_6[5] = 1.;

  /* "cpp/cppelement.pxd":19
 * 
 *     inline void init_matrixM():
 *         this.M = [[1., 0., 0., 0., 0., 0.],             # <<<<<<<<<<<<<<
 *                   [0., 1., 0., 0., 0., 0.],
 *                   [0., 0., 1., 0., 0., 0.],
 */
  memcpy(&(__pyx_t_7[0]), __pyx_t_1, sizeof(__pyx_t_7[0]));
  memcpy(&(__pyx_t_7[1]), __pyx_t_2, sizeof(__pyx_t_7[0]));
  memcpy(&(__pyx_t_7[2]), __pyx_t_3, sizeof(__pyx_t_7[0]));
  memcpy(&(__pyx_t_7[3]), __pyx_t_4, sizeof(__pyx_t_7[0]));
  memcpy(&(__pyx_t_7[4]), __pyx_t_5, sizeof(__pyx_t_7[0]));
  memcpy(&(__pyx_t_7[5]), __pyx_t_6, sizeof(__pyx_t_7[0]));
  memcpy(&(this->M[0]), __pyx_t_7, sizeof(this->M[0]) * (6));

  /* "cpp/cppelement.pxd":18
 *         pass
 * 
 *     inline void init_matrixM():             # <<<<<<<<<<<<<<
 *         this.M = [[1., 0., 0., 0., 0., 0.],
 *                   [0., 1., 0., 0., 0., 0.],
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cpp/cppelement.pxd":26
 *                   [0., 0., 0., 0., 0., 1.]]
 * 
 *     inline void update_matrixM()nogil:             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

void __pyx_t_4atpy_3src_3cpp_10cppelement_CppElement::update_matrixM(void) {

  /* function exit code */
}

/* "cpp/cppelement.pxd":29
 *         pass
 * 
 *     inline void update_matrixT()nogil:             # <<<<<<<<<<<<<<
 *         M = this.M
 *         cdef int i
 */

void __pyx_t_4atpy_3src_3cpp_10cppelement_CppElement::update_matrixT(void) {
  double (*__pyx_v_M)[6];
  int __pyx_v_i;
  double (*__pyx_t_1)[6];
  int __pyx_t_2;

  /* "cpp/cppelement.pxd":30
 * 
 *     inline void update_matrixT()nogil:
 *         M = this.M             # <<<<<<<<<<<<<<
 *         cdef int i
 *         for i in range(2):
 */
  __pyx_t_1 = this->M;
  __pyx_v_M = __pyx_t_1;

  /* "cpp/cppelement.pxd":32
 *         M = this.M
 *         cdef int i
 *         for i in range(2):             # <<<<<<<<<<<<<<
 *             this.T[3*i][3*i+0] =  M[2*i][2*i]**2
 *             this.T[3*i][3*i+1] =  -2*M[2*i][2*i]*M[2*i][2*i+1]
 */
  for (__pyx_t_2 = 0; __pyx_t_2 < 2; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "cpp/cppelement.pxd":33
 *         cdef int i
 *         for i in range(2):
 *             this.T[3*i][3*i+0] =  M[2*i][2*i]**2             # <<<<<<<<<<<<<<
 *             this.T[3*i][3*i+1] =  -2*M[2*i][2*i]*M[2*i][2*i+1]
 *             this.T[3*i][3*i+2] =  M[2*i][2*i+1]**2
 */
    ((this->T[(3 * __pyx_v_i)])[((3 * __pyx_v_i) + 0)]) = pow(((__pyx_v_M[(2 * __pyx_v_i)])[(2 * __pyx_v_i)]), 2.0);

    /* "cpp/cppelement.pxd":34
 *         for i in range(2):
 *             this.T[3*i][3*i+0] =  M[2*i][2*i]**2
 *             this.T[3*i][3*i+1] =  -2*M[2*i][2*i]*M[2*i][2*i+1]             # <<<<<<<<<<<<<<
 *             this.T[3*i][3*i+2] =  M[2*i][2*i+1]**2
 * 
 */
    ((this->T[(3 * __pyx_v_i)])[((3 * __pyx_v_i) + 1)]) = ((-2.0 * ((__pyx_v_M[(2 * __pyx_v_i)])[(2 * __pyx_v_i)])) * ((__pyx_v_M[(2 * __pyx_v_i)])[((2 * __pyx_v_i) + 1)]));

    /* "cpp/cppelement.pxd":35
 *             this.T[3*i][3*i+0] =  M[2*i][2*i]**2
 *             this.T[3*i][3*i+1] =  -2*M[2*i][2*i]*M[2*i][2*i+1]
 *             this.T[3*i][3*i+2] =  M[2*i][2*i+1]**2             # <<<<<<<<<<<<<<
 * 
 *             this.T[3*i+1][3*i+0] =  -M[2*i][2*i]*M[2*i+1][2*i]
 */
    ((this->T[(3 * __pyx_v_i)])[((3 * __pyx_v_i) + 2)]) = pow(((__pyx_v_M[(2 * __pyx_v_i)])[((2 * __pyx_v_i) + 1)]), 2.0);

    /* "cpp/cppelement.pxd":37
 *             this.T[3*i][3*i+2] =  M[2*i][2*i+1]**2
 * 
 *             this.T[3*i+1][3*i+0] =  -M[2*i][2*i]*M[2*i+1][2*i]             # <<<<<<<<<<<<<<
 *             this.T[3*i+1][3*i+1] =  M[2*i][2*i]*M[2*i+1][2*i+1] + M[2*i][2*i+1]*M[2*i+1][2*i]
 *             this.T[3*i+1][3*i+2] =  -M[2*i][2*i+1]*M[2*i+1][2*i+1]
 */
    ((this->T[((3 * __pyx_v_i) + 1)])[((3 * __pyx_v_i) + 0)]) = ((-((__pyx_v_M[(2 * __pyx_v_i)])[(2 * __pyx_v_i)])) * ((__pyx_v_M[((2 * __pyx_v_i) + 1)])[(2 * __pyx_v_i)]));

    /* "cpp/cppelement.pxd":38
 * 
 *             this.T[3*i+1][3*i+0] =  -M[2*i][2*i]*M[2*i+1][2*i]
 *             this.T[3*i+1][3*i+1] =  M[2*i][2*i]*M[2*i+1][2*i+1] + M[2*i][2*i+1]*M[2*i+1][2*i]             # <<<<<<<<<<<<<<
 *             this.T[3*i+1][3*i+2] =  -M[2*i][2*i+1]*M[2*i+1][2*i+1]
 * 
 */
    ((this->T[((3 * __pyx_v_i) + 1)])[((3 * __pyx_v_i) + 1)]) = ((((__pyx_v_M[(2 * __pyx_v_i)])[(2 * __pyx_v_i)]) * ((__pyx_v_M[((2 * __pyx_v_i) + 1)])[((2 * __pyx_v_i) + 1)])) + (((__pyx_v_M[(2 * __pyx_v_i)])[((2 * __pyx_v_i) + 1)]) * ((__pyx_v_M[((2 * __pyx_v_i) + 1)])[(2 * __pyx_v_i)])));

    /* "cpp/cppelement.pxd":39
 *             this.T[3*i+1][3*i+0] =  -M[2*i][2*i]*M[2*i+1][2*i]
 *             this.T[3*i+1][3*i+1] =  M[2*i][2*i]*M[2*i+1][2*i+1] + M[2*i][2*i+1]*M[2*i+1][2*i]
 *             this.T[3*i+1][3*i+2] =  -M[2*i][2*i+1]*M[2*i+1][2*i+1]             # <<<<<<<<<<<<<<
 * 
 *             this.T[3*i+2][3*i+0] =  M[2*i+1][2*i]**2
 */
    ((this->T[((3 * __pyx_v_i) + 1)])[((3 * __pyx_v_i) + 2)]) = ((-((__pyx_v_M[(2 * __pyx_v_i)])[((2 * __pyx_v_i) + 1)])) * ((__pyx_v_M[((2 * __pyx_v_i) + 1)])[((2 * __pyx_v_i) + 1)]));

    /* "cpp/cppelement.pxd":41
 *             this.T[3*i+1][3*i+2] =  -M[2*i][2*i+1]*M[2*i+1][2*i+1]
 * 
 *             this.T[3*i+2][3*i+0] =  M[2*i+1][2*i]**2             # <<<<<<<<<<<<<<
 *             this.T[3*i+2][3*i+1] =  -2*M[2*i+1][2*i]*M[2*i+1][2*i+1]
 *             this.T[3*i+2][3*i+2] =  M[2*i+1][2*i+1]**2
 */
    ((this->T[((3 * __pyx_v_i) + 2)])[((3 * __pyx_v_i) + 0)]) = pow(((__pyx_v_M[((2 * __pyx_v_i) + 1)])[(2 * __pyx_v_i)]), 2.0);

    /* "cpp/cppelement.pxd":42
 * 
 *             this.T[3*i+2][3*i+0] =  M[2*i+1][2*i]**2
 *             this.T[3*i+2][3*i+1] =  -2*M[2*i+1][2*i]*M[2*i+1][2*i+1]             # <<<<<<<<<<<<<<
 *             this.T[3*i+2][3*i+2] =  M[2*i+1][2*i+1]**2
 * 
 */
    ((this->T[((3 * __pyx_v_i) + 2)])[((3 * __pyx_v_i) + 1)]) = ((-2.0 * ((__pyx_v_M[((2 * __pyx_v_i) + 1)])[(2 * __pyx_v_i)])) * ((__pyx_v_M[((2 * __pyx_v_i) + 1)])[((2 * __pyx_v_i) + 1)]));

    /* "cpp/cppelement.pxd":43
 *             this.T[3*i+2][3*i+0] =  M[2*i+1][2*i]**2
 *             this.T[3*i+2][3*i+1] =  -2*M[2*i+1][2*i]*M[2*i+1][2*i+1]
 *             this.T[3*i+2][3*i+2] =  M[2*i+1][2*i+1]**2             # <<<<<<<<<<<<<<
 * 
 * 
 */
    ((this->T[((3 * __pyx_v_i) + 2)])[((3 * __pyx_v_i) + 2)]) = pow(((__pyx_v_M[((2 * __pyx_v_i) + 1)])[((2 * __pyx_v_i) + 1)]), 2.0);
  }

  /* "cpp/cppelement.pxd":29
 *         pass
 * 
 *     inline void update_matrixT()nogil:             # <<<<<<<<<<<<<<
 *         M = this.M
 *         cdef int i
 */

  /* function exit code */
}

/* "cpp/cppelement.pxd":54
 * #                   [0., 0., 0., M[3][2]**2, -2*M[3][2]*M[3][3], M[3][3]**2]]
 * 
 *     inline void get_twiss(double* parms0, double* parms)nogil:             # <<<<<<<<<<<<<<
 * #         for i in range()
 *         parms[0] = this.T[0][0]*parms0[0] + this.T[0][1]*parms0[1] + this.T[0][2]*parms0[2]
 */

void __pyx_t_4atpy_3src_3cpp_10cppelement_CppElement::get_twiss(double *__pyx_v_parms0, double *__pyx_v_parms) {

  /* "cpp/cppelement.pxd":56
 *     inline void get_twiss(double* parms0, double* parms)nogil:
 * #         for i in range()
 *         parms[0] = this.T[0][0]*parms0[0] + this.T[0][1]*parms0[1] + this.T[0][2]*parms0[2]             # <<<<<<<<<<<<<<
 *         parms[1] = this.T[1][0]*parms0[0] + this.T[1][1]*parms0[1] + this.T[1][2]*parms0[2]
 *         parms[2] = this.T[2][0]*parms0[0] + this.T[2][1]*parms0[1] + this.T[2][2]*parms0[2]
 */
  (__pyx_v_parms[0]) = (((((this->T[0])[0]) * (__pyx_v_parms0[0])) + (((this->T[0])[1]) * (__pyx_v_parms0[1]))) + (((this->T[0])[2]) * (__pyx_v_parms0[2])));

  /* "cpp/cppelement.pxd":57
 * #         for i in range()
 *         parms[0] = this.T[0][0]*parms0[0] + this.T[0][1]*parms0[1] + this.T[0][2]*parms0[2]
 *         parms[1] = this.T[1][0]*parms0[0] + this.T[1][1]*parms0[1] + this.T[1][2]*parms0[2]             # <<<<<<<<<<<<<<
 *         parms[2] = this.T[2][0]*parms0[0] + this.T[2][1]*parms0[1] + this.T[2][2]*parms0[2]
 * 
 */
  (__pyx_v_parms[1]) = (((((this->T[1])[0]) * (__pyx_v_parms0[0])) + (((this->T[1])[1]) * (__pyx_v_parms0[1]))) + (((this->T[1])[2]) * (__pyx_v_parms0[2])));

  /* "cpp/cppelement.pxd":58
 *         parms[0] = this.T[0][0]*parms0[0] + this.T[0][1]*parms0[1] + this.T[0][2]*parms0[2]
 *         parms[1] = this.T[1][0]*parms0[0] + this.T[1][1]*parms0[1] + this.T[1][2]*parms0[2]
 *         parms[2] = this.T[2][0]*parms0[0] + this.T[2][1]*parms0[1] + this.T[2][2]*parms0[2]             # <<<<<<<<<<<<<<
 * 
 *         parms[3] = this.T[3][3]*parms0[3] + this.T[3][4]*parms0[4] + this.T[3][5]*parms0[5]
 */
  (__pyx_v_parms[2]) = (((((this->T[2])[0]) * (__pyx_v_parms0[0])) + (((this->T[2])[1]) * (__pyx_v_parms0[1]))) + (((this->T[2])[2]) * (__pyx_v_parms0[2])));

  /* "cpp/cppelement.pxd":60
 *         parms[2] = this.T[2][0]*parms0[0] + this.T[2][1]*parms0[1] + this.T[2][2]*parms0[2]
 * 
 *         parms[3] = this.T[3][3]*parms0[3] + this.T[3][4]*parms0[4] + this.T[3][5]*parms0[5]             # <<<<<<<<<<<<<<
 *         parms[4] = this.T[4][3]*parms0[3] + this.T[4][4]*parms0[4] + this.T[4][5]*parms0[5]
 *         parms[5] = this.T[5][3]*parms0[3] + this.T[5][4]*parms0[4] + this.T[5][5]*parms0[5]
 */
  (__pyx_v_parms[3]) = (((((this->T[3])[3]) * (__pyx_v_parms0[3])) + (((this->T[3])[4]) * (__pyx_v_parms0[4]))) + (((this->T[3])[5]) * (__pyx_v_parms0[5])));

  /* "cpp/cppelement.pxd":61
 * 
 *         parms[3] = this.T[3][3]*parms0[3] + this.T[3][4]*parms0[4] + this.T[3][5]*parms0[5]
 *         parms[4] = this.T[4][3]*parms0[3] + this.T[4][4]*parms0[4] + this.T[4][5]*parms0[5]             # <<<<<<<<<<<<<<
 *         parms[5] = this.T[5][3]*parms0[3] + this.T[5][4]*parms0[4] + this.T[5][5]*parms0[5]
 * 
 */
  (__pyx_v_parms[4]) = (((((this->T[4])[3]) * (__pyx_v_parms0[3])) + (((this->T[4])[4]) * (__pyx_v_parms0[4]))) + (((this->T[4])[5]) * (__pyx_v_parms0[5])));

  /* "cpp/cppelement.pxd":62
 *         parms[3] = this.T[3][3]*parms0[3] + this.T[3][4]*parms0[4] + this.T[3][5]*parms0[5]
 *         parms[4] = this.T[4][3]*parms0[3] + this.T[4][4]*parms0[4] + this.T[4][5]*parms0[5]
 *         parms[5] = this.T[5][3]*parms0[3] + this.T[5][4]*parms0[4] + this.T[5][5]*parms0[5]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  (__pyx_v_parms[5]) = (((((this->T[5])[3]) * (__pyx_v_parms0[3])) + (((this->T[5])[4]) * (__pyx_v_parms0[4]))) + (((this->T[5])[5]) * (__pyx_v_parms0[5])));

  /* "cpp/cppelement.pxd":54
 * #                   [0., 0., 0., M[3][2]**2, -2*M[3][2]*M[3][3], M[3][3]**2]]
 * 
 *     inline void get_twiss(double* parms0, double* parms)nogil:             # <<<<<<<<<<<<<<
 * #         for i in range()
 *         parms[0] = this.T[0][0]*parms0[0] + this.T[0][1]*parms0[1] + this.T[0][2]*parms0[2]
 */

  /* function exit code */
}

/* "cpp/cppelement.pxd":65
 * 
 * 
 *     inline void get_phase(double* parms0, double* parms)nogil:             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

void __pyx_t_4atpy_3src_3cpp_10cppelement_CppElement::get_phase(CYTHON_UNUSED double *__pyx_v_parms0, CYTHON_UNUSED double *__pyx_v_parms) {

  /* function exit code */
}

/* "cpp/cppelement.pxd":68
 *         pass
 * 
 *     inline void get_dispersion(double* parms0, double* parms)nogil:             # <<<<<<<<<<<<<<
 * #         parms[6] = this.M[0][0]*parms0[6] + this.M[0][1]*parms0[7] + this.M[0][5]
 * #         parms[7] = this.M[1][0]*parms0[6] + this.M[1][1]*parms0[7] + this.M[1][5]
 */

void __pyx_t_4atpy_3src_3cpp_10cppelement_CppElement::get_dispersion(double *__pyx_v_parms0, double *__pyx_v_parms) {

  /* "cpp/cppelement.pxd":71
 * #         parms[6] = this.M[0][0]*parms0[6] + this.M[0][1]*parms0[7] + this.M[0][5]
 * #         parms[7] = this.M[1][0]*parms0[6] + this.M[1][1]*parms0[7] + this.M[1][5]
 *         parms[12] = this.M[0][0]*parms0[12] + this.M[0][1]*parms0[13] + this.M[0][5]             # <<<<<<<<<<<<<<
 *         parms[13] = this.M[1][0]*parms0[12] + this.M[1][1]*parms0[13] + this.M[1][5]
 * 
 */
  (__pyx_v_parms[12]) = (((((this->M[0])[0]) * (__pyx_v_parms0[12])) + (((this->M[0])[1]) * (__pyx_v_parms0[13]))) + ((this->M[0])[5]));

  /* "cpp/cppelement.pxd":72
 * #         parms[7] = this.M[1][0]*parms0[6] + this.M[1][1]*parms0[7] + this.M[1][5]
 *         parms[12] = this.M[0][0]*parms0[12] + this.M[0][1]*parms0[13] + this.M[0][5]
 *         parms[13] = this.M[1][0]*parms0[12] + this.M[1][1]*parms0[13] + this.M[1][5]             # <<<<<<<<<<<<<<
 * 
 *     inline void update(double* parms)nogil:
 */
  (__pyx_v_parms[13]) = (((((this->M[1])[0]) * (__pyx_v_parms0[12])) + (((this->M[1])[1]) * (__pyx_v_parms0[13]))) + ((this->M[1])[5]));

  /* "cpp/cppelement.pxd":68
 *         pass
 * 
 *     inline void get_dispersion(double* parms0, double* parms)nogil:             # <<<<<<<<<<<<<<
 * #         parms[6] = this.M[0][0]*parms0[6] + this.M[0][1]*parms0[7] + this.M[0][5]
 * #         parms[7] = this.M[1][0]*parms0[6] + this.M[1][1]*parms0[7] + this.M[1][5]
 */

  /* function exit code */
}

/* "cpp/cppelement.pxd":74
 *         parms[13] = this.M[1][0]*parms0[12] + this.M[1][1]*parms0[13] + this.M[1][5]
 * 
 *     inline void update(double* parms)nogil:             # <<<<<<<<<<<<<<
 *         pass
 */

void __pyx_t_4atpy_3src_3cpp_10cppelement_CppElement::update(CYTHON_UNUSED double *__pyx_v_parms) {

  /* function exit code */
}

/* "cpp/cppmarker.pxd":3
 * from .cppelement cimport CppElement
 * cdef cppclass CppMarker(CppElement):
 *     __init__():             # <<<<<<<<<<<<<<
 *         this.elem_type = 0
 *         this.l = 0.
 */

void __pyx_t_4atpy_3src_3cpp_9cppmarker_CppMarker::__pyx_f___init__CppMarker(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("<init>", 0);

  /* "cpp/cppmarker.pxd":4
 * cdef cppclass CppMarker(CppElement):
 *     __init__():
 *         this.elem_type = 0             # <<<<<<<<<<<<<<
 *         this.l = 0.
 *         this.init_matrixM()
 */
  this->elem_type = 0;

  /* "cpp/cppmarker.pxd":5
 *     __init__():
 *         this.elem_type = 0
 *         this.l = 0.             # <<<<<<<<<<<<<<
 *         this.init_matrixM()
 *         this.update_matrixT()
 */
  this->l = 0.;

  /* "cpp/cppmarker.pxd":6
 *         this.elem_type = 0
 *         this.l = 0.
 *         this.init_matrixM()             # <<<<<<<<<<<<<<
 *         this.update_matrixT()
 * 
 */
  this->init_matrixM();

  /* "cpp/cppmarker.pxd":7
 *         this.l = 0.
 *         this.init_matrixM()
 *         this.update_matrixT()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  this->update_matrixT();

  /* "cpp/cppmarker.pxd":3
 * from .cppelement cimport CppElement
 * cdef cppclass CppMarker(CppElement):
 *     __init__():             # <<<<<<<<<<<<<<
 *         this.elem_type = 0
 *         this.l = 0.
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cpp/cppmarker.pxd":10
 * 
 * 
 *     inline void get_phase(double* parms0, double* parms)nogil:             # <<<<<<<<<<<<<<
 *         parms[9] = parms0[9]
 *         parms[10] = parms0[10]
 */

void __pyx_t_4atpy_3src_3cpp_9cppmarker_CppMarker::get_phase(double *__pyx_v_parms0, double *__pyx_v_parms) {

  /* "cpp/cppmarker.pxd":11
 * 
 *     inline void get_phase(double* parms0, double* parms)nogil:
 *         parms[9] = parms0[9]             # <<<<<<<<<<<<<<
 *         parms[10] = parms0[10]
 */
  (__pyx_v_parms[9]) = (__pyx_v_parms0[9]);

  /* "cpp/cppmarker.pxd":12
 *     inline void get_phase(double* parms0, double* parms)nogil:
 *         parms[9] = parms0[9]
 *         parms[10] = parms0[10]             # <<<<<<<<<<<<<<
 */
  (__pyx_v_parms[10]) = (__pyx_v_parms0[10]);

  /* "cpp/cppmarker.pxd":10
 * 
 * 
 *     inline void get_phase(double* parms0, double* parms)nogil:             # <<<<<<<<<<<<<<
 *         parms[9] = parms0[9]
 *         parms[10] = parms0[10]
 */

  /* function exit code */
}

/* "cpp/cppdrift.pxd":4
 * from libc.math cimport pi,atan
 * cdef cppclass CppDrift(CppElement):
 *     __init__(double* parms):             # <<<<<<<<<<<<<<
 *         this.elem_type = 1
 *         this.l = parms[0]
 */

void __pyx_t_4atpy_3src_3cpp_8cppdrift_CppDrift::__pyx_f___init__CppDrift(double *__pyx_v_parms) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("<init>", 0);

  /* "cpp/cppdrift.pxd":5
 * cdef cppclass CppDrift(CppElement):
 *     __init__(double* parms):
 *         this.elem_type = 1             # <<<<<<<<<<<<<<
 *         this.l = parms[0]
 *         this.init_matrixM()
 */
  this->elem_type = 1;

  /* "cpp/cppdrift.pxd":6
 *     __init__(double* parms):
 *         this.elem_type = 1
 *         this.l = parms[0]             # <<<<<<<<<<<<<<
 *         this.init_matrixM()
 *         this.update_matrixM()
 */
  this->l = (__pyx_v_parms[0]);

  /* "cpp/cppdrift.pxd":7
 *         this.elem_type = 1
 *         this.l = parms[0]
 *         this.init_matrixM()             # <<<<<<<<<<<<<<
 *         this.update_matrixM()
 *         this.update_matrixT()
 */
  this->init_matrixM();

  /* "cpp/cppdrift.pxd":8
 *         this.l = parms[0]
 *         this.init_matrixM()
 *         this.update_matrixM()             # <<<<<<<<<<<<<<
 *         this.update_matrixT()
 * 
 */
  this->update_matrixM();

  /* "cpp/cppdrift.pxd":9
 *         this.init_matrixM()
 *         this.update_matrixM()
 *         this.update_matrixT()             # <<<<<<<<<<<<<<
 * 
 *     inline void update_matrixM()nogil:
 */
  this->update_matrixT();

  /* "cpp/cppdrift.pxd":4
 * from libc.math cimport pi,atan
 * cdef cppclass CppDrift(CppElement):
 *     __init__(double* parms):             # <<<<<<<<<<<<<<
 *         this.elem_type = 1
 *         this.l = parms[0]
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cpp/cppdrift.pxd":11
 *         this.update_matrixT()
 * 
 *     inline void update_matrixM()nogil:             # <<<<<<<<<<<<<<
 *         l = this.l
 *         this.M[0][1] = l
 */

void __pyx_t_4atpy_3src_3cpp_8cppdrift_CppDrift::update_matrixM(void) {
  double __pyx_v_l;
  double __pyx_t_1;

  /* "cpp/cppdrift.pxd":12
 * 
 *     inline void update_matrixM()nogil:
 *         l = this.l             # <<<<<<<<<<<<<<
 *         this.M[0][1] = l
 *         this.M[2][3] = l
 */
  __pyx_t_1 = this->l;
  __pyx_v_l = __pyx_t_1;

  /* "cpp/cppdrift.pxd":13
 *     inline void update_matrixM()nogil:
 *         l = this.l
 *         this.M[0][1] = l             # <<<<<<<<<<<<<<
 *         this.M[2][3] = l
 *         this.M[4][5] = l
 */
  ((this->M[0])[1]) = __pyx_v_l;

  /* "cpp/cppdrift.pxd":14
 *         l = this.l
 *         this.M[0][1] = l
 *         this.M[2][3] = l             # <<<<<<<<<<<<<<
 *         this.M[4][5] = l
 * 
 */
  ((this->M[2])[3]) = __pyx_v_l;

  /* "cpp/cppdrift.pxd":15
 *         this.M[0][1] = l
 *         this.M[2][3] = l
 *         this.M[4][5] = l             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((this->M[4])[5]) = __pyx_v_l;

  /* "cpp/cppdrift.pxd":11
 *         this.update_matrixT()
 * 
 *     inline void update_matrixM()nogil:             # <<<<<<<<<<<<<<
 *         l = this.l
 *         this.M[0][1] = l
 */

  /* function exit code */
}

/* "cpp/cppdrift.pxd":18
 * 
 * 
 *     inline void get_phase(double* parms0, double* parms)nogil:             # <<<<<<<<<<<<<<
 *         l = this.l
 *         parms[9] = parms0[9] + (atan(parms0[2]*l - parms0[1]) + atan(parms0[1]))/(2*pi)
 */

void __pyx_t_4atpy_3src_3cpp_8cppdrift_CppDrift::get_phase(double *__pyx_v_parms0, double *__pyx_v_parms) {
  double __pyx_v_l;
  double __pyx_t_1;
  double __pyx_t_2;

  /* "cpp/cppdrift.pxd":19
 * 
 *     inline void get_phase(double* parms0, double* parms)nogil:
 *         l = this.l             # <<<<<<<<<<<<<<
 *         parms[9] = parms0[9] + (atan(parms0[2]*l - parms0[1]) + atan(parms0[1]))/(2*pi)
 *         parms[10] = parms0[10] + (atan(parms0[5]*l - parms0[4]) + atan(parms0[4]))/(2*pi)
 */
  __pyx_t_1 = this->l;
  __pyx_v_l = __pyx_t_1;

  /* "cpp/cppdrift.pxd":20
 *     inline void get_phase(double* parms0, double* parms)nogil:
 *         l = this.l
 *         parms[9] = parms0[9] + (atan(parms0[2]*l - parms0[1]) + atan(parms0[1]))/(2*pi)             # <<<<<<<<<<<<<<
 *         parms[10] = parms0[10] + (atan(parms0[5]*l - parms0[4]) + atan(parms0[4]))/(2*pi)
 * #         parms[8] = parms0[8] + (atan(parms0[2]*l - parms0[1]) + atan(parms0[1]))/(2*pi)
 */
  __pyx_t_1 = (atan((((__pyx_v_parms0[2]) * __pyx_v_l) - (__pyx_v_parms0[1]))) + atan((__pyx_v_parms0[1])));
  __pyx_t_2 = (2.0 * M_PI);
  if (unlikely(__pyx_t_2 == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
    __PYX_ERR(2, 20, __pyx_L1_error)
  }
  (__pyx_v_parms[9]) = ((__pyx_v_parms0[9]) + (__pyx_t_1 / __pyx_t_2));

  /* "cpp/cppdrift.pxd":21
 *         l = this.l
 *         parms[9] = parms0[9] + (atan(parms0[2]*l - parms0[1]) + atan(parms0[1]))/(2*pi)
 *         parms[10] = parms0[10] + (atan(parms0[5]*l - parms0[4]) + atan(parms0[4]))/(2*pi)             # <<<<<<<<<<<<<<
 * #         parms[8] = parms0[8] + (atan(parms0[2]*l - parms0[1]) + atan(parms0[1]))/(2*pi)
 * #         parms[9] = parms0[9] + (atan(parms0[5]*l - parms0[4]) + atan(parms0[4]))/(2*pi)
 */
  __pyx_t_2 = (atan((((__pyx_v_parms0[5]) * __pyx_v_l) - (__pyx_v_parms0[4]))) + atan((__pyx_v_parms0[4])));
  __pyx_t_1 = (2.0 * M_PI);
  if (unlikely(__pyx_t_1 == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
    __PYX_ERR(2, 21, __pyx_L1_error)
  }
  (__pyx_v_parms[10]) = ((__pyx_v_parms0[10]) + (__pyx_t_2 / __pyx_t_1));

  /* "cpp/cppdrift.pxd":18
 * 
 * 
 *     inline void get_phase(double* parms0, double* parms)nogil:             # <<<<<<<<<<<<<<
 *         l = this.l
 *         parms[9] = parms0[9] + (atan(parms0[2]*l - parms0[1]) + atan(parms0[1]))/(2*pi)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("CppDrift.get_phase", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_L0:;
}

/* "cpp/cppdrift.pxd":26
 * 
 * 
 *     inline void update(double* parms)nogil:             # <<<<<<<<<<<<<<
 *         this.l = parms[0]
 *         this.update_matrixM()
 */

void __pyx_t_4atpy_3src_3cpp_8cppdrift_CppDrift::update(double *__pyx_v_parms) {

  /* "cpp/cppdrift.pxd":27
 * 
 *     inline void update(double* parms)nogil:
 *         this.l = parms[0]             # <<<<<<<<<<<<<<
 *         this.update_matrixM()
 *         this.update_matrixT()
 */
  this->l = (__pyx_v_parms[0]);

  /* "cpp/cppdrift.pxd":28
 *     inline void update(double* parms)nogil:
 *         this.l = parms[0]
 *         this.update_matrixM()             # <<<<<<<<<<<<<<
 *         this.update_matrixT()
 * 
 */
  this->update_matrixM();

  /* "cpp/cppdrift.pxd":29
 *         this.l = parms[0]
 *         this.update_matrixM()
 *         this.update_matrixT()             # <<<<<<<<<<<<<<
 * 
 */
  this->update_matrixT();

  /* "cpp/cppdrift.pxd":26
 * 
 * 
 *     inline void update(double* parms)nogil:             # <<<<<<<<<<<<<<
 *         this.l = parms[0]
 *         this.update_matrixM()
 */

  /* function exit code */
}

/* "cpp/cppdipole.pxd":4
 * from libc.math cimport sin,cos,sinh,cosh,tan,atan,exp,sqrt,pi
 * cdef cppclass CppDipole(CppElement):
 *     __init__(double* parms):             # <<<<<<<<<<<<<<
 *         this.elem_type = 2
 *         this.l = parms[0]
 */

void __pyx_t_4atpy_3src_3cpp_9cppdipole_CppDipole::__pyx_f___init__CppDipole(double *__pyx_v_parms) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("<init>", 0);

  /* "cpp/cppdipole.pxd":5
 * cdef cppclass CppDipole(CppElement):
 *     __init__(double* parms):
 *         this.elem_type = 2             # <<<<<<<<<<<<<<
 *         this.l = parms[0]
 *         this.angle = parms[1]
 */
  this->elem_type = 2;

  /* "cpp/cppdipole.pxd":6
 *     __init__(double* parms):
 *         this.elem_type = 2
 *         this.l = parms[0]             # <<<<<<<<<<<<<<
 *         this.angle = parms[1]
 * #         this.rho = this.l/this.angle
 */
  this->l = (__pyx_v_parms[0]);

  /* "cpp/cppdipole.pxd":7
 *         this.elem_type = 2
 *         this.l = parms[0]
 *         this.angle = parms[1]             # <<<<<<<<<<<<<<
 * #         this.rho = this.l/this.angle
 *         this.init_matrixM()
 */
  this->angle = (__pyx_v_parms[1]);

  /* "cpp/cppdipole.pxd":9
 *         this.angle = parms[1]
 * #         this.rho = this.l/this.angle
 *         this.init_matrixM()             # <<<<<<<<<<<<<<
 *         this.update_matrixM()
 *         this.update_matrixT()
 */
  this->init_matrixM();

  /* "cpp/cppdipole.pxd":10
 * #         this.rho = this.l/this.angle
 *         this.init_matrixM()
 *         this.update_matrixM()             # <<<<<<<<<<<<<<
 *         this.update_matrixT()
 * 
 */
  this->update_matrixM();

  /* "cpp/cppdipole.pxd":11
 *         this.init_matrixM()
 *         this.update_matrixM()
 *         this.update_matrixT()             # <<<<<<<<<<<<<<
 * 
 *     inline void update_matrixM()nogil:
 */
  this->update_matrixT();

  /* "cpp/cppdipole.pxd":4
 * from libc.math cimport sin,cos,sinh,cosh,tan,atan,exp,sqrt,pi
 * cdef cppclass CppDipole(CppElement):
 *     __init__(double* parms):             # <<<<<<<<<<<<<<
 *         this.elem_type = 2
 *         this.l = parms[0]
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cpp/cppdipole.pxd":13
 *         this.update_matrixT()
 * 
 *     inline void update_matrixM()nogil:             # <<<<<<<<<<<<<<
 *         l = this.l
 *         angle = this.angle
 */

void __pyx_t_4atpy_3src_3cpp_9cppdipole_CppDipole::update_matrixM(void) {
  CYTHON_UNUSED double __pyx_v_l;
  double __pyx_v_angle;
  double __pyx_v_rho;
  double __pyx_t_1;

  /* "cpp/cppdipole.pxd":14
 * 
 *     inline void update_matrixM()nogil:
 *         l = this.l             # <<<<<<<<<<<<<<
 *         angle = this.angle
 *         rho =this.l/angle
 */
  __pyx_t_1 = this->l;
  __pyx_v_l = __pyx_t_1;

  /* "cpp/cppdipole.pxd":15
 *     inline void update_matrixM()nogil:
 *         l = this.l
 *         angle = this.angle             # <<<<<<<<<<<<<<
 *         rho =this.l/angle
 * 
 */
  __pyx_t_1 = this->angle;
  __pyx_v_angle = __pyx_t_1;

  /* "cpp/cppdipole.pxd":16
 *         l = this.l
 *         angle = this.angle
 *         rho =this.l/angle             # <<<<<<<<<<<<<<
 * 
 *         this.M[0][1] = rho*sin(angle)
 */
  if (unlikely(__pyx_v_angle == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
    __PYX_ERR(3, 16, __pyx_L1_error)
  }
  __pyx_v_rho = (this->l / __pyx_v_angle);

  /* "cpp/cppdipole.pxd":18
 *         rho =this.l/angle
 * 
 *         this.M[0][1] = rho*sin(angle)             # <<<<<<<<<<<<<<
 *         this.M[0][5] = rho*(1-cos(angle))
 * 
 */
  ((this->M[0])[1]) = (__pyx_v_rho * sin(__pyx_v_angle));

  /* "cpp/cppdipole.pxd":19
 * 
 *         this.M[0][1] = rho*sin(angle)
 *         this.M[0][5] = rho*(1-cos(angle))             # <<<<<<<<<<<<<<
 * 
 *         this.M[1][5] = 2*tan(angle/2)
 */
  ((this->M[0])[5]) = (__pyx_v_rho * (1.0 - cos(__pyx_v_angle)));

  /* "cpp/cppdipole.pxd":21
 *         this.M[0][5] = rho*(1-cos(angle))
 * 
 *         this.M[1][5] = 2*tan(angle/2)             # <<<<<<<<<<<<<<
 * 
 *         this.M[2][2] = 1-angle*tan(angle/2)
 */
  ((this->M[1])[5]) = (2.0 * tan((__pyx_v_angle / 2.0)));

  /* "cpp/cppdipole.pxd":23
 *         this.M[1][5] = 2*tan(angle/2)
 * 
 *         this.M[2][2] = 1-angle*tan(angle/2)             # <<<<<<<<<<<<<<
 *         this.M[2][3] = 1
 * 
 */
  ((this->M[2])[2]) = (1.0 - (__pyx_v_angle * tan((__pyx_v_angle / 2.0))));

  /* "cpp/cppdipole.pxd":24
 * 
 *         this.M[2][2] = 1-angle*tan(angle/2)
 *         this.M[2][3] = 1             # <<<<<<<<<<<<<<
 * 
 *         this.M[3][2] = -2*tan(angle/2)*(1-angle/2*tan(angle/2))/rho
 */
  ((this->M[2])[3]) = 1.0;

  /* "cpp/cppdipole.pxd":26
 *         this.M[2][3] = 1
 * 
 *         this.M[3][2] = -2*tan(angle/2)*(1-angle/2*tan(angle/2))/rho             # <<<<<<<<<<<<<<
 *         this.M[3][3] = 1-angle*tan(angle/2)
 * 
 */
  __pyx_t_1 = ((-2.0 * tan((__pyx_v_angle / 2.0))) * (1.0 - ((__pyx_v_angle / 2.0) * tan((__pyx_v_angle / 2.0)))));
  if (unlikely(__pyx_v_rho == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
    __PYX_ERR(3, 26, __pyx_L1_error)
  }
  ((this->M[3])[2]) = (__pyx_t_1 / __pyx_v_rho);

  /* "cpp/cppdipole.pxd":27
 * 
 *         this.M[3][2] = -2*tan(angle/2)*(1-angle/2*tan(angle/2))/rho
 *         this.M[3][3] = 1-angle*tan(angle/2)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((this->M[3])[3]) = (1.0 - (__pyx_v_angle * tan((__pyx_v_angle / 2.0))));

  /* "cpp/cppdipole.pxd":13
 *         this.update_matrixT()
 * 
 *     inline void update_matrixM()nogil:             # <<<<<<<<<<<<<<
 *         l = this.l
 *         angle = this.angle
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("CppDipole.update_matrixM", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_L0:;
}

/* "cpp/cppdipole.pxd":30
 * 
 * 
 *     inline void get_phase(double* parms0, double* parms)nogil:             # <<<<<<<<<<<<<<
 *         l = this.l
 *         angle = this.angle
 */

void __pyx_t_4atpy_3src_3cpp_9cppdipole_CppDipole::get_phase(double *__pyx_v_parms0, double *__pyx_v_parms) {
  double __pyx_v_l;
  double __pyx_v_angle;
  double __pyx_t_1;
  double __pyx_t_2;

  /* "cpp/cppdipole.pxd":31
 * 
 *     inline void get_phase(double* parms0, double* parms)nogil:
 *         l = this.l             # <<<<<<<<<<<<<<
 *         angle = this.angle
 *         parms[9] = parms0[9] + (atan(parms0[2]*tan(angle)*l/angle - parms0[1]) + atan(parms0[1]))/(2*pi)
 */
  __pyx_t_1 = this->l;
  __pyx_v_l = __pyx_t_1;

  /* "cpp/cppdipole.pxd":32
 *     inline void get_phase(double* parms0, double* parms)nogil:
 *         l = this.l
 *         angle = this.angle             # <<<<<<<<<<<<<<
 *         parms[9] = parms0[9] + (atan(parms0[2]*tan(angle)*l/angle - parms0[1]) + atan(parms0[1]))/(2*pi)
 *         parms[10] = parms0[10] + (atan(parms0[5]*l - parms0[4]) + atan(parms0[4]))/(2*pi)
 */
  __pyx_t_1 = this->angle;
  __pyx_v_angle = __pyx_t_1;

  /* "cpp/cppdipole.pxd":33
 *         l = this.l
 *         angle = this.angle
 *         parms[9] = parms0[9] + (atan(parms0[2]*tan(angle)*l/angle - parms0[1]) + atan(parms0[1]))/(2*pi)             # <<<<<<<<<<<<<<
 *         parms[10] = parms0[10] + (atan(parms0[5]*l - parms0[4]) + atan(parms0[4]))/(2*pi)
 * #         parms[8] = parms0[8] + (atan(parms0[2]*tan(angle)*l/angle - parms0[1]) + atan(parms0[1]))/(2*pi)
 */
  __pyx_t_1 = (((__pyx_v_parms0[2]) * tan(__pyx_v_angle)) * __pyx_v_l);
  if (unlikely(__pyx_v_angle == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
    __PYX_ERR(3, 33, __pyx_L1_error)
  }
  __pyx_t_2 = (atan(((__pyx_t_1 / __pyx_v_angle) - (__pyx_v_parms0[1]))) + atan((__pyx_v_parms0[1])));
  __pyx_t_1 = (2.0 * M_PI);
  if (unlikely(__pyx_t_1 == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
    __PYX_ERR(3, 33, __pyx_L1_error)
  }
  (__pyx_v_parms[9]) = ((__pyx_v_parms0[9]) + (__pyx_t_2 / __pyx_t_1));

  /* "cpp/cppdipole.pxd":34
 *         angle = this.angle
 *         parms[9] = parms0[9] + (atan(parms0[2]*tan(angle)*l/angle - parms0[1]) + atan(parms0[1]))/(2*pi)
 *         parms[10] = parms0[10] + (atan(parms0[5]*l - parms0[4]) + atan(parms0[4]))/(2*pi)             # <<<<<<<<<<<<<<
 * #         parms[8] = parms0[8] + (atan(parms0[2]*tan(angle)*l/angle - parms0[1]) + atan(parms0[1]))/(2*pi)
 * #         parms[9] = parms0[9] + (atan(parms0[5]*l - parms0[4]) + atan(parms0[4]))/(2*pi)
 */
  __pyx_t_1 = (atan((((__pyx_v_parms0[5]) * __pyx_v_l) - (__pyx_v_parms0[4]))) + atan((__pyx_v_parms0[4])));
  __pyx_t_2 = (2.0 * M_PI);
  if (unlikely(__pyx_t_2 == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
    __PYX_ERR(3, 34, __pyx_L1_error)
  }
  (__pyx_v_parms[10]) = ((__pyx_v_parms0[10]) + (__pyx_t_1 / __pyx_t_2));

  /* "cpp/cppdipole.pxd":30
 * 
 * 
 *     inline void get_phase(double* parms0, double* parms)nogil:             # <<<<<<<<<<<<<<
 *         l = this.l
 *         angle = this.angle
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("CppDipole.get_phase", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_L0:;
}

/* "cpp/cppdipole.pxd":39
 * 
 * 
 *     inline void update(double* parms)nogil:             # <<<<<<<<<<<<<<
 *         this.l = parms[0]
 *         this.angle=parms[1]
 */

void __pyx_t_4atpy_3src_3cpp_9cppdipole_CppDipole::update(double *__pyx_v_parms) {

  /* "cpp/cppdipole.pxd":40
 * 
 *     inline void update(double* parms)nogil:
 *         this.l = parms[0]             # <<<<<<<<<<<<<<
 *         this.angle=parms[1]
 *         this.update_matrixM()
 */
  this->l = (__pyx_v_parms[0]);

  /* "cpp/cppdipole.pxd":41
 *     inline void update(double* parms)nogil:
 *         this.l = parms[0]
 *         this.angle=parms[1]             # <<<<<<<<<<<<<<
 *         this.update_matrixM()
 *         this.update_matrixT()
 */
  this->angle = (__pyx_v_parms[1]);

  /* "cpp/cppdipole.pxd":42
 *         this.l = parms[0]
 *         this.angle=parms[1]
 *         this.update_matrixM()             # <<<<<<<<<<<<<<
 *         this.update_matrixT()
 */
  this->update_matrixM();

  /* "cpp/cppdipole.pxd":43
 *         this.angle=parms[1]
 *         this.update_matrixM()
 *         this.update_matrixT()             # <<<<<<<<<<<<<<
 */
  this->update_matrixT();

  /* "cpp/cppdipole.pxd":39
 * 
 * 
 *     inline void update(double* parms)nogil:             # <<<<<<<<<<<<<<
 *         this.l = parms[0]
 *         this.angle=parms[1]
 */

  /* function exit code */
}

/* "cpp/cppquadrupole.pxd":4
 * from libc.math cimport pi,cos,sin,cosh,sinh,tan,atan,sqrt,exp
 * cdef cppclass CppQuadrupole(CppElement):
 *     __init__(double* parms):             # <<<<<<<<<<<<<<
 *         this.elem_type = 3
 *         this.l = parms[0]
 */

void __pyx_t_4atpy_3src_3cpp_13cppquadrupole_CppQuadrupole::__pyx_f___init__CppQuadrupole(double *__pyx_v_parms) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("<init>", 0);

  /* "cpp/cppquadrupole.pxd":5
 * cdef cppclass CppQuadrupole(CppElement):
 *     __init__(double* parms):
 *         this.elem_type = 3             # <<<<<<<<<<<<<<
 *         this.l = parms[0]
 *         this.k1 = parms[2]
 */
  this->elem_type = 3;

  /* "cpp/cppquadrupole.pxd":6
 *     __init__(double* parms):
 *         this.elem_type = 3
 *         this.l = parms[0]             # <<<<<<<<<<<<<<
 *         this.k1 = parms[2]
 *         this.init_matrixM()
 */
  this->l = (__pyx_v_parms[0]);

  /* "cpp/cppquadrupole.pxd":7
 *         this.elem_type = 3
 *         this.l = parms[0]
 *         this.k1 = parms[2]             # <<<<<<<<<<<<<<
 *         this.init_matrixM()
 *         this.update_matrixM()
 */
  this->k1 = (__pyx_v_parms[2]);

  /* "cpp/cppquadrupole.pxd":8
 *         this.l = parms[0]
 *         this.k1 = parms[2]
 *         this.init_matrixM()             # <<<<<<<<<<<<<<
 *         this.update_matrixM()
 *         this.update_matrixT()
 */
  this->init_matrixM();

  /* "cpp/cppquadrupole.pxd":9
 *         this.k1 = parms[2]
 *         this.init_matrixM()
 *         this.update_matrixM()             # <<<<<<<<<<<<<<
 *         this.update_matrixT()
 * 
 */
  this->update_matrixM();

  /* "cpp/cppquadrupole.pxd":10
 *         this.init_matrixM()
 *         this.update_matrixM()
 *         this.update_matrixT()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  this->update_matrixT();

  /* "cpp/cppquadrupole.pxd":4
 * from libc.math cimport pi,cos,sin,cosh,sinh,tan,atan,sqrt,exp
 * cdef cppclass CppQuadrupole(CppElement):
 *     __init__(double* parms):             # <<<<<<<<<<<<<<
 *         this.elem_type = 3
 *         this.l = parms[0]
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cpp/cppquadrupole.pxd":13
 * 
 * 
 *     inline void update_matrixM()nogil:             # <<<<<<<<<<<<<<
 *         cdef int i
 *         l = this.l
 */

void __pyx_t_4atpy_3src_3cpp_13cppquadrupole_CppQuadrupole::update_matrixM(void) {
  int __pyx_v_i;
  double __pyx_v_l;
  double __pyx_v_k1;
  double __pyx_t_1;
  int __pyx_t_2;

  /* "cpp/cppquadrupole.pxd":15
 *     inline void update_matrixM()nogil:
 *         cdef int i
 *         l = this.l             # <<<<<<<<<<<<<<
 *         if this.k1 > 0:
 *             k1 = sqrt(this.k1)
 */
  __pyx_t_1 = this->l;
  __pyx_v_l = __pyx_t_1;

  /* "cpp/cppquadrupole.pxd":16
 *         cdef int i
 *         l = this.l
 *         if this.k1 > 0:             # <<<<<<<<<<<<<<
 *             k1 = sqrt(this.k1)
 *             i = 1
 */
  __pyx_t_2 = ((this->k1 > 0.0) != 0);
  if (__pyx_t_2) {

    /* "cpp/cppquadrupole.pxd":17
 *         l = this.l
 *         if this.k1 > 0:
 *             k1 = sqrt(this.k1)             # <<<<<<<<<<<<<<
 *             i = 1
 *         elif this.k1 < 0:
 */
    __pyx_v_k1 = sqrt(this->k1);

    /* "cpp/cppquadrupole.pxd":18
 *         if this.k1 > 0:
 *             k1 = sqrt(this.k1)
 *             i = 1             # <<<<<<<<<<<<<<
 *         elif this.k1 < 0:
 *             k1 = sqrt(-this.k1)
 */
    __pyx_v_i = 1;

    /* "cpp/cppquadrupole.pxd":16
 *         cdef int i
 *         l = this.l
 *         if this.k1 > 0:             # <<<<<<<<<<<<<<
 *             k1 = sqrt(this.k1)
 *             i = 1
 */
    goto __pyx_L3;
  }

  /* "cpp/cppquadrupole.pxd":19
 *             k1 = sqrt(this.k1)
 *             i = 1
 *         elif this.k1 < 0:             # <<<<<<<<<<<<<<
 *             k1 = sqrt(-this.k1)
 *             i = -1
 */
  __pyx_t_2 = ((this->k1 < 0.0) != 0);
  if (__pyx_t_2) {

    /* "cpp/cppquadrupole.pxd":20
 *             i = 1
 *         elif this.k1 < 0:
 *             k1 = sqrt(-this.k1)             # <<<<<<<<<<<<<<
 *             i = -1
 *         else:
 */
    __pyx_v_k1 = sqrt((-this->k1));

    /* "cpp/cppquadrupole.pxd":21
 *         elif this.k1 < 0:
 *             k1 = sqrt(-this.k1)
 *             i = -1             # <<<<<<<<<<<<<<
 *         else:
 *             i = 0
 */
    __pyx_v_i = -1;

    /* "cpp/cppquadrupole.pxd":19
 *             k1 = sqrt(this.k1)
 *             i = 1
 *         elif this.k1 < 0:             # <<<<<<<<<<<<<<
 *             k1 = sqrt(-this.k1)
 *             i = -1
 */
    goto __pyx_L3;
  }

  /* "cpp/cppquadrupole.pxd":23
 *             i = -1
 *         else:
 *             i = 0             # <<<<<<<<<<<<<<
 * 
 *         if i == 0:
 */
  /*else*/ {
    __pyx_v_i = 0;
  }
  __pyx_L3:;

  /* "cpp/cppquadrupole.pxd":25
 *             i = 0
 * 
 *         if i == 0:             # <<<<<<<<<<<<<<
 *             this.M[0][1] = l
 *             this.M[2][3] = l
 */
  switch (__pyx_v_i) {
    case 0:

    /* "cpp/cppquadrupole.pxd":26
 * 
 *         if i == 0:
 *             this.M[0][1] = l             # <<<<<<<<<<<<<<
 *             this.M[2][3] = l
 *             this.M[4][5] = l
 */
    ((this->M[0])[1]) = __pyx_v_l;

    /* "cpp/cppquadrupole.pxd":27
 *         if i == 0:
 *             this.M[0][1] = l
 *             this.M[2][3] = l             # <<<<<<<<<<<<<<
 *             this.M[4][5] = l
 *         elif i==1 or i==-1:
 */
    ((this->M[2])[3]) = __pyx_v_l;

    /* "cpp/cppquadrupole.pxd":28
 *             this.M[0][1] = l
 *             this.M[2][3] = l
 *             this.M[4][5] = l             # <<<<<<<<<<<<<<
 *         elif i==1 or i==-1:
 *             this.M[1-i][1-i] = cos(k1*l)
 */
    ((this->M[4])[5]) = __pyx_v_l;

    /* "cpp/cppquadrupole.pxd":25
 *             i = 0
 * 
 *         if i == 0:             # <<<<<<<<<<<<<<
 *             this.M[0][1] = l
 *             this.M[2][3] = l
 */
    break;
    case 1:

    /* "cpp/cppquadrupole.pxd":29
 *             this.M[2][3] = l
 *             this.M[4][5] = l
 *         elif i==1 or i==-1:             # <<<<<<<<<<<<<<
 *             this.M[1-i][1-i] = cos(k1*l)
 *             this.M[1-i][2-i] = sin(k1*l)/k1
 */
    case -1L:

    /* "cpp/cppquadrupole.pxd":30
 *             this.M[4][5] = l
 *         elif i==1 or i==-1:
 *             this.M[1-i][1-i] = cos(k1*l)             # <<<<<<<<<<<<<<
 *             this.M[1-i][2-i] = sin(k1*l)/k1
 *             this.M[2-i][1-i] = -k1*sin(k1*l)
 */
    ((this->M[(1 - __pyx_v_i)])[(1 - __pyx_v_i)]) = cos((__pyx_v_k1 * __pyx_v_l));

    /* "cpp/cppquadrupole.pxd":31
 *         elif i==1 or i==-1:
 *             this.M[1-i][1-i] = cos(k1*l)
 *             this.M[1-i][2-i] = sin(k1*l)/k1             # <<<<<<<<<<<<<<
 *             this.M[2-i][1-i] = -k1*sin(k1*l)
 *             this.M[2-i][2-i] = cos(k1*l)
 */
    __pyx_t_1 = sin((__pyx_v_k1 * __pyx_v_l));
    if (unlikely(__pyx_v_k1 == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(4, 31, __pyx_L1_error)
    }
    ((this->M[(1 - __pyx_v_i)])[(2 - __pyx_v_i)]) = (__pyx_t_1 / __pyx_v_k1);

    /* "cpp/cppquadrupole.pxd":32
 *             this.M[1-i][1-i] = cos(k1*l)
 *             this.M[1-i][2-i] = sin(k1*l)/k1
 *             this.M[2-i][1-i] = -k1*sin(k1*l)             # <<<<<<<<<<<<<<
 *             this.M[2-i][2-i] = cos(k1*l)
 * 
 */
    ((this->M[(2 - __pyx_v_i)])[(1 - __pyx_v_i)]) = ((-__pyx_v_k1) * sin((__pyx_v_k1 * __pyx_v_l)));

    /* "cpp/cppquadrupole.pxd":33
 *             this.M[1-i][2-i] = sin(k1*l)/k1
 *             this.M[2-i][1-i] = -k1*sin(k1*l)
 *             this.M[2-i][2-i] = cos(k1*l)             # <<<<<<<<<<<<<<
 * 
 *             this.M[1+i][1+i] = cosh(k1*l)
 */
    ((this->M[(2 - __pyx_v_i)])[(2 - __pyx_v_i)]) = cos((__pyx_v_k1 * __pyx_v_l));

    /* "cpp/cppquadrupole.pxd":35
 *             this.M[2-i][2-i] = cos(k1*l)
 * 
 *             this.M[1+i][1+i] = cosh(k1*l)             # <<<<<<<<<<<<<<
 *             this.M[1+i][2+i] = sinh(k1*l)/k1
 *             this.M[2+i][1+i] = k1*sinh(k1*l)
 */
    ((this->M[(1 + __pyx_v_i)])[(1 + __pyx_v_i)]) = cosh((__pyx_v_k1 * __pyx_v_l));

    /* "cpp/cppquadrupole.pxd":36
 * 
 *             this.M[1+i][1+i] = cosh(k1*l)
 *             this.M[1+i][2+i] = sinh(k1*l)/k1             # <<<<<<<<<<<<<<
 *             this.M[2+i][1+i] = k1*sinh(k1*l)
 *             this.M[2+i][2+i] = cosh(k1*l)
 */
    __pyx_t_1 = sinh((__pyx_v_k1 * __pyx_v_l));
    if (unlikely(__pyx_v_k1 == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(4, 36, __pyx_L1_error)
    }
    ((this->M[(1 + __pyx_v_i)])[(2 + __pyx_v_i)]) = (__pyx_t_1 / __pyx_v_k1);

    /* "cpp/cppquadrupole.pxd":37
 *             this.M[1+i][1+i] = cosh(k1*l)
 *             this.M[1+i][2+i] = sinh(k1*l)/k1
 *             this.M[2+i][1+i] = k1*sinh(k1*l)             # <<<<<<<<<<<<<<
 *             this.M[2+i][2+i] = cosh(k1*l)
 * 
 */
    ((this->M[(2 + __pyx_v_i)])[(1 + __pyx_v_i)]) = (__pyx_v_k1 * sinh((__pyx_v_k1 * __pyx_v_l)));

    /* "cpp/cppquadrupole.pxd":38
 *             this.M[1+i][2+i] = sinh(k1*l)/k1
 *             this.M[2+i][1+i] = k1*sinh(k1*l)
 *             this.M[2+i][2+i] = cosh(k1*l)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    ((this->M[(2 + __pyx_v_i)])[(2 + __pyx_v_i)]) = cosh((__pyx_v_k1 * __pyx_v_l));

    /* "cpp/cppquadrupole.pxd":29
 *             this.M[2][3] = l
 *             this.M[4][5] = l
 *         elif i==1 or i==-1:             # <<<<<<<<<<<<<<
 *             this.M[1-i][1-i] = cos(k1*l)
 *             this.M[1-i][2-i] = sin(k1*l)/k1
 */
    break;
    default: break;
  }

  /* "cpp/cppquadrupole.pxd":13
 * 
 * 
 *     inline void update_matrixM()nogil:             # <<<<<<<<<<<<<<
 *         cdef int i
 *         l = this.l
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("CppQuadrupole.update_matrixM", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_L0:;
}

/* "cpp/cppquadrupole.pxd":42
 * 
 * 
 *     inline void get_phase(double* parms0, double* parms)nogil:             # <<<<<<<<<<<<<<
 *         l = this.l
 * #         if this.k1 > 0:
 */

void __pyx_t_4atpy_3src_3cpp_13cppquadrupole_CppQuadrupole::get_phase(double *__pyx_v_parms0, double *__pyx_v_parms) {
  double __pyx_v_l;
  double __pyx_v_k1;
  double __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;

  /* "cpp/cppquadrupole.pxd":43
 * 
 *     inline void get_phase(double* parms0, double* parms)nogil:
 *         l = this.l             # <<<<<<<<<<<<<<
 * #         if this.k1 > 0:
 * #             k1 = sqrt(this.k1)
 */
  __pyx_t_1 = this->l;
  __pyx_v_l = __pyx_t_1;

  /* "cpp/cppquadrupole.pxd":58
 * #             parms[9] = parms0[9] + (atan(parms0[5]*l - parms0[4]) + atan(parms0[4]))/(2*pi)
 * 
 *         if this.k1 > 0:             # <<<<<<<<<<<<<<
 *             k1 = sqrt(this.k1)
 *             parms[9] = parms0[9] + (atan(parms0[2]*tan(k1*l)/k1 - parms0[1]) + atan(parms0[1]))/(2*pi)
 */
  __pyx_t_2 = ((this->k1 > 0.0) != 0);
  if (__pyx_t_2) {

    /* "cpp/cppquadrupole.pxd":59
 * 
 *         if this.k1 > 0:
 *             k1 = sqrt(this.k1)             # <<<<<<<<<<<<<<
 *             parms[9] = parms0[9] + (atan(parms0[2]*tan(k1*l)/k1 - parms0[1]) + atan(parms0[1]))/(2*pi)
 * 
 */
    __pyx_v_k1 = sqrt(this->k1);

    /* "cpp/cppquadrupole.pxd":60
 *         if this.k1 > 0:
 *             k1 = sqrt(this.k1)
 *             parms[9] = parms0[9] + (atan(parms0[2]*tan(k1*l)/k1 - parms0[1]) + atan(parms0[1]))/(2*pi)             # <<<<<<<<<<<<<<
 * 
 *             parms[10] = parms0[10] + (atan((k1*parms0[3]*cosh(k1*l) + parms0[5]/k1*sinh(k1*l) - parms0[4]*exp(k1*l))*exp(k1*l))
 */
    __pyx_t_1 = ((__pyx_v_parms0[2]) * tan((__pyx_v_k1 * __pyx_v_l)));
    if (unlikely(__pyx_v_k1 == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(4, 60, __pyx_L1_error)
    }
    __pyx_t_3 = (atan(((__pyx_t_1 / __pyx_v_k1) - (__pyx_v_parms0[1]))) + atan((__pyx_v_parms0[1])));
    __pyx_t_1 = (2.0 * M_PI);
    if (unlikely(__pyx_t_1 == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(4, 60, __pyx_L1_error)
    }
    (__pyx_v_parms[9]) = ((__pyx_v_parms0[9]) + (__pyx_t_3 / __pyx_t_1));

    /* "cpp/cppquadrupole.pxd":62
 *             parms[9] = parms0[9] + (atan(parms0[2]*tan(k1*l)/k1 - parms0[1]) + atan(parms0[1]))/(2*pi)
 * 
 *             parms[10] = parms0[10] + (atan((k1*parms0[3]*cosh(k1*l) + parms0[5]/k1*sinh(k1*l) - parms0[4]*exp(k1*l))*exp(k1*l))             # <<<<<<<<<<<<<<
 *                                     -atan(k1*parms0[3] - parms0[4]))/(2*pi)
 *         elif this.k1 < 0:
 */
    if (unlikely(__pyx_v_k1 == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(4, 62, __pyx_L1_error)
    }

    /* "cpp/cppquadrupole.pxd":63
 * 
 *             parms[10] = parms0[10] + (atan((k1*parms0[3]*cosh(k1*l) + parms0[5]/k1*sinh(k1*l) - parms0[4]*exp(k1*l))*exp(k1*l))
 *                                     -atan(k1*parms0[3] - parms0[4]))/(2*pi)             # <<<<<<<<<<<<<<
 *         elif this.k1 < 0:
 *             k1 = sqrt(-this.k1)
 */
    __pyx_t_1 = (atan((((((__pyx_v_k1 * (__pyx_v_parms0[3])) * cosh((__pyx_v_k1 * __pyx_v_l))) + (((__pyx_v_parms0[5]) / __pyx_v_k1) * sinh((__pyx_v_k1 * __pyx_v_l)))) - ((__pyx_v_parms0[4]) * exp((__pyx_v_k1 * __pyx_v_l)))) * exp((__pyx_v_k1 * __pyx_v_l)))) - atan(((__pyx_v_k1 * (__pyx_v_parms0[3])) - (__pyx_v_parms0[4]))));
    __pyx_t_3 = (2.0 * M_PI);
    if (unlikely(__pyx_t_3 == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(4, 63, __pyx_L1_error)
    }

    /* "cpp/cppquadrupole.pxd":62
 *             parms[9] = parms0[9] + (atan(parms0[2]*tan(k1*l)/k1 - parms0[1]) + atan(parms0[1]))/(2*pi)
 * 
 *             parms[10] = parms0[10] + (atan((k1*parms0[3]*cosh(k1*l) + parms0[5]/k1*sinh(k1*l) - parms0[4]*exp(k1*l))*exp(k1*l))             # <<<<<<<<<<<<<<
 *                                     -atan(k1*parms0[3] - parms0[4]))/(2*pi)
 *         elif this.k1 < 0:
 */
    (__pyx_v_parms[10]) = ((__pyx_v_parms0[10]) + (__pyx_t_1 / __pyx_t_3));

    /* "cpp/cppquadrupole.pxd":58
 * #             parms[9] = parms0[9] + (atan(parms0[5]*l - parms0[4]) + atan(parms0[4]))/(2*pi)
 * 
 *         if this.k1 > 0:             # <<<<<<<<<<<<<<
 *             k1 = sqrt(this.k1)
 *             parms[9] = parms0[9] + (atan(parms0[2]*tan(k1*l)/k1 - parms0[1]) + atan(parms0[1]))/(2*pi)
 */
    goto __pyx_L3;
  }

  /* "cpp/cppquadrupole.pxd":64
 *             parms[10] = parms0[10] + (atan((k1*parms0[3]*cosh(k1*l) + parms0[5]/k1*sinh(k1*l) - parms0[4]*exp(k1*l))*exp(k1*l))
 *                                     -atan(k1*parms0[3] - parms0[4]))/(2*pi)
 *         elif this.k1 < 0:             # <<<<<<<<<<<<<<
 *             k1 = sqrt(-this.k1)
 *             parms[9] = parms0[9] + (atan(( (k1*parms0[0]-2*parms0[1])*cosh(k1*l) + parms0[2]/k1*sinh(k1*l))*exp(k1*l)+parms0[1])
 */
  __pyx_t_2 = ((this->k1 < 0.0) != 0);
  if (__pyx_t_2) {

    /* "cpp/cppquadrupole.pxd":65
 *                                     -atan(k1*parms0[3] - parms0[4]))/(2*pi)
 *         elif this.k1 < 0:
 *             k1 = sqrt(-this.k1)             # <<<<<<<<<<<<<<
 *             parms[9] = parms0[9] + (atan(( (k1*parms0[0]-2*parms0[1])*cosh(k1*l) + parms0[2]/k1*sinh(k1*l))*exp(k1*l)+parms0[1])
 *                                     - atan(k1*parms0[0] - parms0[1]))/(2*pi)
 */
    __pyx_v_k1 = sqrt((-this->k1));

    /* "cpp/cppquadrupole.pxd":66
 *         elif this.k1 < 0:
 *             k1 = sqrt(-this.k1)
 *             parms[9] = parms0[9] + (atan(( (k1*parms0[0]-2*parms0[1])*cosh(k1*l) + parms0[2]/k1*sinh(k1*l))*exp(k1*l)+parms0[1])             # <<<<<<<<<<<<<<
 *                                     - atan(k1*parms0[0] - parms0[1]))/(2*pi)
 *             parms[10] = parms0[10] + (atan(parms0[5]*tan(k1*l)/k1 - parms0[4]) + atan(parms0[4]))/(2*pi)
 */
    if (unlikely(__pyx_v_k1 == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(4, 66, __pyx_L1_error)
    }

    /* "cpp/cppquadrupole.pxd":67
 *             k1 = sqrt(-this.k1)
 *             parms[9] = parms0[9] + (atan(( (k1*parms0[0]-2*parms0[1])*cosh(k1*l) + parms0[2]/k1*sinh(k1*l))*exp(k1*l)+parms0[1])
 *                                     - atan(k1*parms0[0] - parms0[1]))/(2*pi)             # <<<<<<<<<<<<<<
 *             parms[10] = parms0[10] + (atan(parms0[5]*tan(k1*l)/k1 - parms0[4]) + atan(parms0[4]))/(2*pi)
 *         else:
 */
    __pyx_t_3 = (atan(((((((__pyx_v_k1 * (__pyx_v_parms0[0])) - (2.0 * (__pyx_v_parms0[1]))) * cosh((__pyx_v_k1 * __pyx_v_l))) + (((__pyx_v_parms0[2]) / __pyx_v_k1) * sinh((__pyx_v_k1 * __pyx_v_l)))) * exp((__pyx_v_k1 * __pyx_v_l))) + (__pyx_v_parms0[1]))) - atan(((__pyx_v_k1 * (__pyx_v_parms0[0])) - (__pyx_v_parms0[1]))));
    __pyx_t_1 = (2.0 * M_PI);
    if (unlikely(__pyx_t_1 == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(4, 67, __pyx_L1_error)
    }

    /* "cpp/cppquadrupole.pxd":66
 *         elif this.k1 < 0:
 *             k1 = sqrt(-this.k1)
 *             parms[9] = parms0[9] + (atan(( (k1*parms0[0]-2*parms0[1])*cosh(k1*l) + parms0[2]/k1*sinh(k1*l))*exp(k1*l)+parms0[1])             # <<<<<<<<<<<<<<
 *                                     - atan(k1*parms0[0] - parms0[1]))/(2*pi)
 *             parms[10] = parms0[10] + (atan(parms0[5]*tan(k1*l)/k1 - parms0[4]) + atan(parms0[4]))/(2*pi)
 */
    (__pyx_v_parms[9]) = ((__pyx_v_parms0[9]) + (__pyx_t_3 / __pyx_t_1));

    /* "cpp/cppquadrupole.pxd":68
 *             parms[9] = parms0[9] + (atan(( (k1*parms0[0]-2*parms0[1])*cosh(k1*l) + parms0[2]/k1*sinh(k1*l))*exp(k1*l)+parms0[1])
 *                                     - atan(k1*parms0[0] - parms0[1]))/(2*pi)
 *             parms[10] = parms0[10] + (atan(parms0[5]*tan(k1*l)/k1 - parms0[4]) + atan(parms0[4]))/(2*pi)             # <<<<<<<<<<<<<<
 *         else:
 *             parms[9] = parms0[9] + (atan(parms0[2]*l - parms0[1]) + atan(parms0[1]))/(2*pi)
 */
    __pyx_t_1 = ((__pyx_v_parms0[5]) * tan((__pyx_v_k1 * __pyx_v_l)));
    if (unlikely(__pyx_v_k1 == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(4, 68, __pyx_L1_error)
    }
    __pyx_t_3 = (atan(((__pyx_t_1 / __pyx_v_k1) - (__pyx_v_parms0[4]))) + atan((__pyx_v_parms0[4])));
    __pyx_t_1 = (2.0 * M_PI);
    if (unlikely(__pyx_t_1 == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(4, 68, __pyx_L1_error)
    }
    (__pyx_v_parms[10]) = ((__pyx_v_parms0[10]) + (__pyx_t_3 / __pyx_t_1));

    /* "cpp/cppquadrupole.pxd":64
 *             parms[10] = parms0[10] + (atan((k1*parms0[3]*cosh(k1*l) + parms0[5]/k1*sinh(k1*l) - parms0[4]*exp(k1*l))*exp(k1*l))
 *                                     -atan(k1*parms0[3] - parms0[4]))/(2*pi)
 *         elif this.k1 < 0:             # <<<<<<<<<<<<<<
 *             k1 = sqrt(-this.k1)
 *             parms[9] = parms0[9] + (atan(( (k1*parms0[0]-2*parms0[1])*cosh(k1*l) + parms0[2]/k1*sinh(k1*l))*exp(k1*l)+parms0[1])
 */
    goto __pyx_L3;
  }

  /* "cpp/cppquadrupole.pxd":70
 *             parms[10] = parms0[10] + (atan(parms0[5]*tan(k1*l)/k1 - parms0[4]) + atan(parms0[4]))/(2*pi)
 *         else:
 *             parms[9] = parms0[9] + (atan(parms0[2]*l - parms0[1]) + atan(parms0[1]))/(2*pi)             # <<<<<<<<<<<<<<
 *             parms[10] = parms0[10] + (atan(parms0[5]*l - parms0[4]) + atan(parms0[4]))/(2*pi)
 * 
 */
  /*else*/ {
    __pyx_t_1 = (atan((((__pyx_v_parms0[2]) * __pyx_v_l) - (__pyx_v_parms0[1]))) + atan((__pyx_v_parms0[1])));
    __pyx_t_3 = (2.0 * M_PI);
    if (unlikely(__pyx_t_3 == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(4, 70, __pyx_L1_error)
    }
    (__pyx_v_parms[9]) = ((__pyx_v_parms0[9]) + (__pyx_t_1 / __pyx_t_3));

    /* "cpp/cppquadrupole.pxd":71
 *         else:
 *             parms[9] = parms0[9] + (atan(parms0[2]*l - parms0[1]) + atan(parms0[1]))/(2*pi)
 *             parms[10] = parms0[10] + (atan(parms0[5]*l - parms0[4]) + atan(parms0[4]))/(2*pi)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = (atan((((__pyx_v_parms0[5]) * __pyx_v_l) - (__pyx_v_parms0[4]))) + atan((__pyx_v_parms0[4])));
    __pyx_t_1 = (2.0 * M_PI);
    if (unlikely(__pyx_t_1 == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(4, 71, __pyx_L1_error)
    }
    (__pyx_v_parms[10]) = ((__pyx_v_parms0[10]) + (__pyx_t_3 / __pyx_t_1));
  }
  __pyx_L3:;

  /* "cpp/cppquadrupole.pxd":42
 * 
 * 
 *     inline void get_phase(double* parms0, double* parms)nogil:             # <<<<<<<<<<<<<<
 *         l = this.l
 * #         if this.k1 > 0:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("CppQuadrupole.get_phase", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_L0:;
}

/* "cpp/cppquadrupole.pxd":74
 * 
 * 
 *     inline void update(double* parms)nogil:             # <<<<<<<<<<<<<<
 *         this.l = parms[0]
 *         this.k1= parms[2]
 */

void __pyx_t_4atpy_3src_3cpp_13cppquadrupole_CppQuadrupole::update(double *__pyx_v_parms) {

  /* "cpp/cppquadrupole.pxd":75
 * 
 *     inline void update(double* parms)nogil:
 *         this.l = parms[0]             # <<<<<<<<<<<<<<
 *         this.k1= parms[2]
 *         this.update_matrixM()
 */
  this->l = (__pyx_v_parms[0]);

  /* "cpp/cppquadrupole.pxd":76
 *     inline void update(double* parms)nogil:
 *         this.l = parms[0]
 *         this.k1= parms[2]             # <<<<<<<<<<<<<<
 *         this.update_matrixM()
 *         this.update_matrixT()
 */
  this->k1 = (__pyx_v_parms[2]);

  /* "cpp/cppquadrupole.pxd":77
 *         this.l = parms[0]
 *         this.k1= parms[2]
 *         this.update_matrixM()             # <<<<<<<<<<<<<<
 *         this.update_matrixT()
 */
  this->update_matrixM();

  /* "cpp/cppquadrupole.pxd":78
 *         this.k1= parms[2]
 *         this.update_matrixM()
 *         this.update_matrixT()             # <<<<<<<<<<<<<<
 */
  this->update_matrixT();

  /* "cpp/cppquadrupole.pxd":74
 * 
 * 
 *     inline void update(double* parms)nogil:             # <<<<<<<<<<<<<<
 *         this.l = parms[0]
 *         this.k1= parms[2]
 */

  /* function exit code */
}
static struct __pyx_vtabstruct_4atpy_3src_6cython_8elements_Element __pyx_vtable_4atpy_3src_6cython_8elements_Element;

static PyObject *__pyx_tp_new_4atpy_3src_6cython_8elements_Element(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_4atpy_3src_6cython_8elements_Element *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4atpy_3src_6cython_8elements_Element *)o);
  p->__pyx_vtab = __pyx_vtabptr_4atpy_3src_6cython_8elements_Element;
  p->mem = ((struct __pyx_obj_5cymem_5cymem_Pool *)Py_None); Py_INCREF(Py_None);
  p->name = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->element_type = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_4atpy_3src_6cython_8elements_7Element_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_4atpy_3src_6cython_8elements_Element(PyObject *o) {
  struct __pyx_obj_4atpy_3src_6cython_8elements_Element *p = (struct __pyx_obj_4atpy_3src_6cython_8elements_Element *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_4atpy_3src_6cython_8elements_7Element_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->mem);
  Py_CLEAR(p->name);
  Py_CLEAR(p->element_type);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_4atpy_3src_6cython_8elements_Element(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4atpy_3src_6cython_8elements_Element *p = (struct __pyx_obj_4atpy_3src_6cython_8elements_Element *)o;
  if (p->mem) {
    e = (*v)(((PyObject *)p->mem), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_4atpy_3src_6cython_8elements_Element(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_4atpy_3src_6cython_8elements_Element *p = (struct __pyx_obj_4atpy_3src_6cython_8elements_Element *)o;
  tmp = ((PyObject*)p->mem);
  p->mem = ((struct __pyx_obj_5cymem_5cymem_Pool *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_4atpy_3src_6cython_8elements_Element[] = {
  {"copy", (PyCFunction)__pyx_pw_4atpy_3src_6cython_8elements_7Element_7copy, METH_NOARGS, 0},
  {"get_value", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4atpy_3src_6cython_8elements_7Element_11get_value, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4atpy_3src_6cython_8elements_7Element_13__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4atpy_3src_6cython_8elements_7Element_15__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Element = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  __pyx_pw_4atpy_3src_6cython_8elements_7Element_9__neg__, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  0, /*nb_index*/
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_matrix_multiply*/
  #endif
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_inplace_matrix_multiply*/
  #endif
};

static PyTypeObject __pyx_type_4atpy_3src_6cython_8elements_Element = {
  PyVarObject_HEAD_INIT(0, 0)
  "atpy.src.cython.elements.Element", /*tp_name*/
  sizeof(struct __pyx_obj_4atpy_3src_6cython_8elements_Element), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4atpy_3src_6cython_8elements_Element, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_Element, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4atpy_3src_6cython_8elements_Element, /*tp_traverse*/
  __pyx_tp_clear_4atpy_3src_6cython_8elements_Element, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4atpy_3src_6cython_8elements_Element, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4atpy_3src_6cython_8elements_7Element_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4atpy_3src_6cython_8elements_Element, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_4atpy_3src_6cython_8elements_Marker __pyx_vtable_4atpy_3src_6cython_8elements_Marker;

static PyObject *__pyx_tp_new_4atpy_3src_6cython_8elements_Marker(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_4atpy_3src_6cython_8elements_Marker *p;
  PyObject *o = __pyx_tp_new_4atpy_3src_6cython_8elements_Element(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4atpy_3src_6cython_8elements_Marker *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_4atpy_3src_6cython_8elements_Element*)__pyx_vtabptr_4atpy_3src_6cython_8elements_Marker;
  return o;
}

static PyMethodDef __pyx_methods_4atpy_3src_6cython_8elements_Marker[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4atpy_3src_6cython_8elements_6Marker_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4atpy_3src_6cython_8elements_6Marker_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4atpy_3src_6cython_8elements_Marker = {
  PyVarObject_HEAD_INIT(0, 0)
  "atpy.src.cython.elements.Marker", /*tp_name*/
  sizeof(struct __pyx_obj_4atpy_3src_6cython_8elements_Marker), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4atpy_3src_6cython_8elements_Element, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4atpy_3src_6cython_8elements_Element, /*tp_traverse*/
  __pyx_tp_clear_4atpy_3src_6cython_8elements_Element, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4atpy_3src_6cython_8elements_Marker, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4atpy_3src_6cython_8elements_6Marker_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4atpy_3src_6cython_8elements_Marker, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_4atpy_3src_6cython_8elements_Drift __pyx_vtable_4atpy_3src_6cython_8elements_Drift;

static PyObject *__pyx_tp_new_4atpy_3src_6cython_8elements_Drift(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_4atpy_3src_6cython_8elements_Drift *p;
  PyObject *o = __pyx_tp_new_4atpy_3src_6cython_8elements_Element(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4atpy_3src_6cython_8elements_Drift *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_4atpy_3src_6cython_8elements_Element*)__pyx_vtabptr_4atpy_3src_6cython_8elements_Drift;
  return o;
}

static PyMethodDef __pyx_methods_4atpy_3src_6cython_8elements_Drift[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4atpy_3src_6cython_8elements_5Drift_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4atpy_3src_6cython_8elements_5Drift_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4atpy_3src_6cython_8elements_Drift = {
  PyVarObject_HEAD_INIT(0, 0)
  "atpy.src.cython.elements.Drift", /*tp_name*/
  sizeof(struct __pyx_obj_4atpy_3src_6cython_8elements_Drift), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4atpy_3src_6cython_8elements_Element, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4atpy_3src_6cython_8elements_Element, /*tp_traverse*/
  __pyx_tp_clear_4atpy_3src_6cython_8elements_Element, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4atpy_3src_6cython_8elements_Drift, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4atpy_3src_6cython_8elements_5Drift_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4atpy_3src_6cython_8elements_Drift, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_4atpy_3src_6cython_8elements_Dipole __pyx_vtable_4atpy_3src_6cython_8elements_Dipole;

static PyObject *__pyx_tp_new_4atpy_3src_6cython_8elements_Dipole(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_4atpy_3src_6cython_8elements_Dipole *p;
  PyObject *o = __pyx_tp_new_4atpy_3src_6cython_8elements_Element(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4atpy_3src_6cython_8elements_Dipole *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_4atpy_3src_6cython_8elements_Element*)__pyx_vtabptr_4atpy_3src_6cython_8elements_Dipole;
  return o;
}

static PyMethodDef __pyx_methods_4atpy_3src_6cython_8elements_Dipole[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4atpy_3src_6cython_8elements_6Dipole_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4atpy_3src_6cython_8elements_6Dipole_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4atpy_3src_6cython_8elements_Dipole = {
  PyVarObject_HEAD_INIT(0, 0)
  "atpy.src.cython.elements.Dipole", /*tp_name*/
  sizeof(struct __pyx_obj_4atpy_3src_6cython_8elements_Dipole), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4atpy_3src_6cython_8elements_Element, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4atpy_3src_6cython_8elements_Element, /*tp_traverse*/
  __pyx_tp_clear_4atpy_3src_6cython_8elements_Element, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4atpy_3src_6cython_8elements_Dipole, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4atpy_3src_6cython_8elements_6Dipole_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4atpy_3src_6cython_8elements_Dipole, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_4atpy_3src_6cython_8elements_Quadrupole __pyx_vtable_4atpy_3src_6cython_8elements_Quadrupole;

static PyObject *__pyx_tp_new_4atpy_3src_6cython_8elements_Quadrupole(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_4atpy_3src_6cython_8elements_Quadrupole *p;
  PyObject *o = __pyx_tp_new_4atpy_3src_6cython_8elements_Element(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4atpy_3src_6cython_8elements_Quadrupole *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_4atpy_3src_6cython_8elements_Element*)__pyx_vtabptr_4atpy_3src_6cython_8elements_Quadrupole;
  return o;
}

static PyMethodDef __pyx_methods_4atpy_3src_6cython_8elements_Quadrupole[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4atpy_3src_6cython_8elements_10Quadrupole_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4atpy_3src_6cython_8elements_10Quadrupole_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4atpy_3src_6cython_8elements_Quadrupole = {
  PyVarObject_HEAD_INIT(0, 0)
  "atpy.src.cython.elements.Quadrupole", /*tp_name*/
  sizeof(struct __pyx_obj_4atpy_3src_6cython_8elements_Quadrupole), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4atpy_3src_6cython_8elements_Element, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4atpy_3src_6cython_8elements_Element, /*tp_traverse*/
  __pyx_tp_clear_4atpy_3src_6cython_8elements_Element, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4atpy_3src_6cython_8elements_Quadrupole, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4atpy_3src_6cython_8elements_10Quadrupole_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4atpy_3src_6cython_8elements_Quadrupole, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_4atpy_3src_6cython_8elements_Sextupole __pyx_vtable_4atpy_3src_6cython_8elements_Sextupole;

static PyObject *__pyx_tp_new_4atpy_3src_6cython_8elements_Sextupole(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_4atpy_3src_6cython_8elements_Sextupole *p;
  PyObject *o = __pyx_tp_new_4atpy_3src_6cython_8elements_Element(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4atpy_3src_6cython_8elements_Sextupole *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_4atpy_3src_6cython_8elements_Element*)__pyx_vtabptr_4atpy_3src_6cython_8elements_Sextupole;
  return o;
}

static PyMethodDef __pyx_methods_4atpy_3src_6cython_8elements_Sextupole[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4atpy_3src_6cython_8elements_9Sextupole_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4atpy_3src_6cython_8elements_9Sextupole_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4atpy_3src_6cython_8elements_Sextupole = {
  PyVarObject_HEAD_INIT(0, 0)
  "atpy.src.cython.elements.Sextupole", /*tp_name*/
  sizeof(struct __pyx_obj_4atpy_3src_6cython_8elements_Sextupole), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4atpy_3src_6cython_8elements_Element, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4atpy_3src_6cython_8elements_Element, /*tp_traverse*/
  __pyx_tp_clear_4atpy_3src_6cython_8elements_Element, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4atpy_3src_6cython_8elements_Sextupole, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4atpy_3src_6cython_8elements_9Sextupole_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4atpy_3src_6cython_8elements_Sextupole, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_4atpy_3src_6cython_8elements_Octupole __pyx_vtable_4atpy_3src_6cython_8elements_Octupole;

static PyObject *__pyx_tp_new_4atpy_3src_6cython_8elements_Octupole(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_4atpy_3src_6cython_8elements_Octupole *p;
  PyObject *o = __pyx_tp_new_4atpy_3src_6cython_8elements_Element(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4atpy_3src_6cython_8elements_Octupole *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_4atpy_3src_6cython_8elements_Element*)__pyx_vtabptr_4atpy_3src_6cython_8elements_Octupole;
  return o;
}

static PyMethodDef __pyx_methods_4atpy_3src_6cython_8elements_Octupole[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4atpy_3src_6cython_8elements_8Octupole_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4atpy_3src_6cython_8elements_8Octupole_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4atpy_3src_6cython_8elements_Octupole = {
  PyVarObject_HEAD_INIT(0, 0)
  "atpy.src.cython.elements.Octupole", /*tp_name*/
  sizeof(struct __pyx_obj_4atpy_3src_6cython_8elements_Octupole), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4atpy_3src_6cython_8elements_Element, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4atpy_3src_6cython_8elements_Element, /*tp_traverse*/
  __pyx_tp_clear_4atpy_3src_6cython_8elements_Element, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4atpy_3src_6cython_8elements_Octupole, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4atpy_3src_6cython_8elements_8Octupole_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4atpy_3src_6cython_8elements_Octupole, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_elements(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_elements},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "elements",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_Dipole, __pyx_k_Dipole, sizeof(__pyx_k_Dipole), 0, 0, 1, 1},
  {&__pyx_n_u_Dipole, __pyx_k_Dipole, sizeof(__pyx_k_Dipole), 0, 1, 0, 1},
  {&__pyx_n_s_Drift, __pyx_k_Drift, sizeof(__pyx_k_Drift), 0, 0, 1, 1},
  {&__pyx_n_u_Drift, __pyx_k_Drift, sizeof(__pyx_k_Drift), 0, 1, 0, 1},
  {&__pyx_n_s_Element, __pyx_k_Element, sizeof(__pyx_k_Element), 0, 0, 1, 1},
  {&__pyx_kp_u_Error_arg_was_input, __pyx_k_Error_arg_was_input, sizeof(__pyx_k_Error_arg_was_input), 0, 1, 0, 0},
  {&__pyx_n_s_Marker, __pyx_k_Marker, sizeof(__pyx_k_Marker), 0, 0, 1, 1},
  {&__pyx_n_u_Marker, __pyx_k_Marker, sizeof(__pyx_k_Marker), 0, 1, 0, 1},
  {&__pyx_n_s_Octupole, __pyx_k_Octupole, sizeof(__pyx_k_Octupole), 0, 0, 1, 1},
  {&__pyx_n_u_Octupole, __pyx_k_Octupole, sizeof(__pyx_k_Octupole), 0, 1, 0, 1},
  {&__pyx_kp_u_Please_input_arg, __pyx_k_Please_input_arg, sizeof(__pyx_k_Please_input_arg), 0, 1, 0, 0},
  {&__pyx_n_s_Quadrupole, __pyx_k_Quadrupole, sizeof(__pyx_k_Quadrupole), 0, 0, 1, 1},
  {&__pyx_n_u_Quadrupole, __pyx_k_Quadrupole, sizeof(__pyx_k_Quadrupole), 0, 1, 0, 1},
  {&__pyx_n_s_Sextupole, __pyx_k_Sextupole, sizeof(__pyx_k_Sextupole), 0, 0, 1, 1},
  {&__pyx_n_u_Sextupole, __pyx_k_Sextupole, sizeof(__pyx_k_Sextupole), 0, 1, 0, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_u_alpha_x, __pyx_k_alpha_x, sizeof(__pyx_k_alpha_x), 0, 1, 0, 1},
  {&__pyx_n_u_alpha_y, __pyx_k_alpha_y, sizeof(__pyx_k_alpha_y), 0, 1, 0, 1},
  {&__pyx_n_u_alpha_z, __pyx_k_alpha_z, sizeof(__pyx_k_alpha_z), 0, 1, 0, 1},
  {&__pyx_n_u_angle, __pyx_k_angle, sizeof(__pyx_k_angle), 0, 1, 0, 1},
  {&__pyx_n_s_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 0, 1, 1},
  {&__pyx_n_u_beta_x, __pyx_k_beta_x, sizeof(__pyx_k_beta_x), 0, 1, 0, 1},
  {&__pyx_n_u_beta_y, __pyx_k_beta_y, sizeof(__pyx_k_beta_y), 0, 1, 0, 1},
  {&__pyx_n_u_beta_z, __pyx_k_beta_z, sizeof(__pyx_k_beta_z), 0, 1, 0, 1},
  {&__pyx_n_s_class, __pyx_k_class, sizeof(__pyx_k_class), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_u_e1, __pyx_k_e1, sizeof(__pyx_k_e1), 0, 1, 0, 1},
  {&__pyx_n_u_e2, __pyx_k_e2, sizeof(__pyx_k_e2), 0, 1, 0, 1},
  {&__pyx_n_u_eta_x, __pyx_k_eta_x, sizeof(__pyx_k_eta_x), 0, 1, 0, 1},
  {&__pyx_n_u_eta_y, __pyx_k_eta_y, sizeof(__pyx_k_eta_y), 0, 1, 0, 1},
  {&__pyx_n_u_eta_z, __pyx_k_eta_z, sizeof(__pyx_k_eta_z), 0, 1, 0, 1},
  {&__pyx_n_u_etap_x, __pyx_k_etap_x, sizeof(__pyx_k_etap_x), 0, 1, 0, 1},
  {&__pyx_n_u_etap_y, __pyx_k_etap_y, sizeof(__pyx_k_etap_y), 0, 1, 0, 1},
  {&__pyx_n_u_etap_z, __pyx_k_etap_z, sizeof(__pyx_k_etap_z), 0, 1, 0, 1},
  {&__pyx_n_u_gamma_x, __pyx_k_gamma_x, sizeof(__pyx_k_gamma_x), 0, 1, 0, 1},
  {&__pyx_n_u_gamma_y, __pyx_k_gamma_y, sizeof(__pyx_k_gamma_y), 0, 1, 0, 1},
  {&__pyx_n_u_gamma_z, __pyx_k_gamma_z, sizeof(__pyx_k_gamma_z), 0, 1, 0, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {&__pyx_n_u_k1, __pyx_k_k1, sizeof(__pyx_k_k1), 0, 1, 0, 1},
  {&__pyx_n_u_k2, __pyx_k_k2, sizeof(__pyx_k_k2), 0, 1, 0, 1},
  {&__pyx_n_s_keys, __pyx_k_keys, sizeof(__pyx_k_keys), 0, 0, 1, 1},
  {&__pyx_n_u_l, __pyx_k_l, sizeof(__pyx_k_l), 0, 1, 0, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_u_nu_x, __pyx_k_nu_x, sizeof(__pyx_k_nu_x), 0, 1, 0, 1},
  {&__pyx_n_u_nu_y, __pyx_k_nu_y, sizeof(__pyx_k_nu_y), 0, 1, 0, 1},
  {&__pyx_n_u_nu_z, __pyx_k_nu_z, sizeof(__pyx_k_nu_z), 0, 1, 0, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_n_u_parameters, __pyx_k_parameters, sizeof(__pyx_k_parameters), 0, 1, 0, 1},
  {&__pyx_n_s_parms, __pyx_k_parms, sizeof(__pyx_k_parms), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_u_twiss, __pyx_k_twiss, sizeof(__pyx_k_twiss), 0, 1, 0, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_print = __Pyx_GetBuiltinName(__pyx_n_s_print); if (!__pyx_builtin_print) __PYX_ERR(0, 21, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 52, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "atpy/src/cython/elements.pyx":21
 *                 self.parms[parms2index[key]]=value
 *             else:
 *                 print('Error arg was input!')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_Error_arg_was_input); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  __pyx_umethod_PyDict_Type_keys.type = (PyObject*)&PyDict_Type;
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_6 = PyInt_FromLong(6); if (unlikely(!__pyx_int_6)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_7 = PyInt_FromLong(7); if (unlikely(!__pyx_int_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_8 = PyInt_FromLong(8); if (unlikely(!__pyx_int_8)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_9 = PyInt_FromLong(9); if (unlikely(!__pyx_int_9)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_10 = PyInt_FromLong(10); if (unlikely(!__pyx_int_10)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_11 = PyInt_FromLong(11); if (unlikely(!__pyx_int_11)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_12 = PyInt_FromLong(12); if (unlikely(!__pyx_int_12)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_13 = PyInt_FromLong(13); if (unlikely(!__pyx_int_13)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_14 = PyInt_FromLong(14); if (unlikely(!__pyx_int_14)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_15 = PyInt_FromLong(15); if (unlikely(!__pyx_int_15)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_16 = PyInt_FromLong(16); if (unlikely(!__pyx_int_16)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_17 = PyInt_FromLong(17); if (unlikely(!__pyx_int_17)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_4atpy_3src_6cython_8elements_Element = &__pyx_vtable_4atpy_3src_6cython_8elements_Element;
  __pyx_vtable_4atpy_3src_6cython_8elements_Element.bind2element = (__pyx_t_4atpy_3src_3cpp_10cppelement_CppElement *(*)(struct __pyx_obj_4atpy_3src_6cython_8elements_Element *))__pyx_f_4atpy_3src_6cython_8elements_7Element_bind2element;
  __pyx_vtable_4atpy_3src_6cython_8elements_Element.bind2twiss = (double *(*)(struct __pyx_obj_4atpy_3src_6cython_8elements_Element *))__pyx_f_4atpy_3src_6cython_8elements_7Element_bind2twiss;
  __pyx_vtable_4atpy_3src_6cython_8elements_Element.bind2parameter = (double *(*)(struct __pyx_obj_4atpy_3src_6cython_8elements_Element *))__pyx_f_4atpy_3src_6cython_8elements_7Element_bind2parameter;
  if (PyType_Ready(&__pyx_type_4atpy_3src_6cython_8elements_Element) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4atpy_3src_6cython_8elements_Element.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4atpy_3src_6cython_8elements_Element.tp_dictoffset && __pyx_type_4atpy_3src_6cython_8elements_Element.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4atpy_3src_6cython_8elements_Element.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4atpy_3src_6cython_8elements_Element.tp_dict, __pyx_vtabptr_4atpy_3src_6cython_8elements_Element) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Element, (PyObject *)&__pyx_type_4atpy_3src_6cython_8elements_Element) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4atpy_3src_6cython_8elements_Element) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_ptype_4atpy_3src_6cython_8elements_Element = &__pyx_type_4atpy_3src_6cython_8elements_Element;
  __pyx_vtabptr_4atpy_3src_6cython_8elements_Marker = &__pyx_vtable_4atpy_3src_6cython_8elements_Marker;
  __pyx_vtable_4atpy_3src_6cython_8elements_Marker.__pyx_base = *__pyx_vtabptr_4atpy_3src_6cython_8elements_Element;
  __pyx_type_4atpy_3src_6cython_8elements_Marker.tp_base = __pyx_ptype_4atpy_3src_6cython_8elements_Element;
  if (PyType_Ready(&__pyx_type_4atpy_3src_6cython_8elements_Marker) < 0) __PYX_ERR(0, 85, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4atpy_3src_6cython_8elements_Marker.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4atpy_3src_6cython_8elements_Marker.tp_dictoffset && __pyx_type_4atpy_3src_6cython_8elements_Marker.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4atpy_3src_6cython_8elements_Marker.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4atpy_3src_6cython_8elements_Marker.tp_dict, __pyx_vtabptr_4atpy_3src_6cython_8elements_Marker) < 0) __PYX_ERR(0, 85, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Marker, (PyObject *)&__pyx_type_4atpy_3src_6cython_8elements_Marker) < 0) __PYX_ERR(0, 85, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4atpy_3src_6cython_8elements_Marker) < 0) __PYX_ERR(0, 85, __pyx_L1_error)
  __pyx_ptype_4atpy_3src_6cython_8elements_Marker = &__pyx_type_4atpy_3src_6cython_8elements_Marker;
  __pyx_vtabptr_4atpy_3src_6cython_8elements_Drift = &__pyx_vtable_4atpy_3src_6cython_8elements_Drift;
  __pyx_vtable_4atpy_3src_6cython_8elements_Drift.__pyx_base = *__pyx_vtabptr_4atpy_3src_6cython_8elements_Element;
  __pyx_type_4atpy_3src_6cython_8elements_Drift.tp_base = __pyx_ptype_4atpy_3src_6cython_8elements_Element;
  if (PyType_Ready(&__pyx_type_4atpy_3src_6cython_8elements_Drift) < 0) __PYX_ERR(0, 91, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4atpy_3src_6cython_8elements_Drift.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4atpy_3src_6cython_8elements_Drift.tp_dictoffset && __pyx_type_4atpy_3src_6cython_8elements_Drift.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4atpy_3src_6cython_8elements_Drift.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4atpy_3src_6cython_8elements_Drift.tp_dict, __pyx_vtabptr_4atpy_3src_6cython_8elements_Drift) < 0) __PYX_ERR(0, 91, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Drift, (PyObject *)&__pyx_type_4atpy_3src_6cython_8elements_Drift) < 0) __PYX_ERR(0, 91, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4atpy_3src_6cython_8elements_Drift) < 0) __PYX_ERR(0, 91, __pyx_L1_error)
  __pyx_ptype_4atpy_3src_6cython_8elements_Drift = &__pyx_type_4atpy_3src_6cython_8elements_Drift;
  __pyx_vtabptr_4atpy_3src_6cython_8elements_Dipole = &__pyx_vtable_4atpy_3src_6cython_8elements_Dipole;
  __pyx_vtable_4atpy_3src_6cython_8elements_Dipole.__pyx_base = *__pyx_vtabptr_4atpy_3src_6cython_8elements_Element;
  __pyx_type_4atpy_3src_6cython_8elements_Dipole.tp_base = __pyx_ptype_4atpy_3src_6cython_8elements_Element;
  if (PyType_Ready(&__pyx_type_4atpy_3src_6cython_8elements_Dipole) < 0) __PYX_ERR(0, 97, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4atpy_3src_6cython_8elements_Dipole.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4atpy_3src_6cython_8elements_Dipole.tp_dictoffset && __pyx_type_4atpy_3src_6cython_8elements_Dipole.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4atpy_3src_6cython_8elements_Dipole.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4atpy_3src_6cython_8elements_Dipole.tp_dict, __pyx_vtabptr_4atpy_3src_6cython_8elements_Dipole) < 0) __PYX_ERR(0, 97, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Dipole, (PyObject *)&__pyx_type_4atpy_3src_6cython_8elements_Dipole) < 0) __PYX_ERR(0, 97, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4atpy_3src_6cython_8elements_Dipole) < 0) __PYX_ERR(0, 97, __pyx_L1_error)
  __pyx_ptype_4atpy_3src_6cython_8elements_Dipole = &__pyx_type_4atpy_3src_6cython_8elements_Dipole;
  __pyx_vtabptr_4atpy_3src_6cython_8elements_Quadrupole = &__pyx_vtable_4atpy_3src_6cython_8elements_Quadrupole;
  __pyx_vtable_4atpy_3src_6cython_8elements_Quadrupole.__pyx_base = *__pyx_vtabptr_4atpy_3src_6cython_8elements_Element;
  __pyx_type_4atpy_3src_6cython_8elements_Quadrupole.tp_base = __pyx_ptype_4atpy_3src_6cython_8elements_Element;
  if (PyType_Ready(&__pyx_type_4atpy_3src_6cython_8elements_Quadrupole) < 0) __PYX_ERR(0, 102, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4atpy_3src_6cython_8elements_Quadrupole.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4atpy_3src_6cython_8elements_Quadrupole.tp_dictoffset && __pyx_type_4atpy_3src_6cython_8elements_Quadrupole.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4atpy_3src_6cython_8elements_Quadrupole.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4atpy_3src_6cython_8elements_Quadrupole.tp_dict, __pyx_vtabptr_4atpy_3src_6cython_8elements_Quadrupole) < 0) __PYX_ERR(0, 102, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Quadrupole, (PyObject *)&__pyx_type_4atpy_3src_6cython_8elements_Quadrupole) < 0) __PYX_ERR(0, 102, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4atpy_3src_6cython_8elements_Quadrupole) < 0) __PYX_ERR(0, 102, __pyx_L1_error)
  __pyx_ptype_4atpy_3src_6cython_8elements_Quadrupole = &__pyx_type_4atpy_3src_6cython_8elements_Quadrupole;
  __pyx_vtabptr_4atpy_3src_6cython_8elements_Sextupole = &__pyx_vtable_4atpy_3src_6cython_8elements_Sextupole;
  __pyx_vtable_4atpy_3src_6cython_8elements_Sextupole.__pyx_base = *__pyx_vtabptr_4atpy_3src_6cython_8elements_Element;
  __pyx_type_4atpy_3src_6cython_8elements_Sextupole.tp_base = __pyx_ptype_4atpy_3src_6cython_8elements_Element;
  if (PyType_Ready(&__pyx_type_4atpy_3src_6cython_8elements_Sextupole) < 0) __PYX_ERR(0, 107, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4atpy_3src_6cython_8elements_Sextupole.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4atpy_3src_6cython_8elements_Sextupole.tp_dictoffset && __pyx_type_4atpy_3src_6cython_8elements_Sextupole.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4atpy_3src_6cython_8elements_Sextupole.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4atpy_3src_6cython_8elements_Sextupole.tp_dict, __pyx_vtabptr_4atpy_3src_6cython_8elements_Sextupole) < 0) __PYX_ERR(0, 107, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Sextupole, (PyObject *)&__pyx_type_4atpy_3src_6cython_8elements_Sextupole) < 0) __PYX_ERR(0, 107, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4atpy_3src_6cython_8elements_Sextupole) < 0) __PYX_ERR(0, 107, __pyx_L1_error)
  __pyx_ptype_4atpy_3src_6cython_8elements_Sextupole = &__pyx_type_4atpy_3src_6cython_8elements_Sextupole;
  __pyx_vtabptr_4atpy_3src_6cython_8elements_Octupole = &__pyx_vtable_4atpy_3src_6cython_8elements_Octupole;
  __pyx_vtable_4atpy_3src_6cython_8elements_Octupole.__pyx_base = *__pyx_vtabptr_4atpy_3src_6cython_8elements_Element;
  __pyx_type_4atpy_3src_6cython_8elements_Octupole.tp_base = __pyx_ptype_4atpy_3src_6cython_8elements_Element;
  if (PyType_Ready(&__pyx_type_4atpy_3src_6cython_8elements_Octupole) < 0) __PYX_ERR(0, 111, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4atpy_3src_6cython_8elements_Octupole.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4atpy_3src_6cython_8elements_Octupole.tp_dictoffset && __pyx_type_4atpy_3src_6cython_8elements_Octupole.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4atpy_3src_6cython_8elements_Octupole.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4atpy_3src_6cython_8elements_Octupole.tp_dict, __pyx_vtabptr_4atpy_3src_6cython_8elements_Octupole) < 0) __PYX_ERR(0, 111, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Octupole, (PyObject *)&__pyx_type_4atpy_3src_6cython_8elements_Octupole) < 0) __PYX_ERR(0, 111, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4atpy_3src_6cython_8elements_Octupole) < 0) __PYX_ERR(0, 111, __pyx_L1_error)
  __pyx_ptype_4atpy_3src_6cython_8elements_Octupole = &__pyx_type_4atpy_3src_6cython_8elements_Octupole;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule("cymem.cymem"); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5cymem_5cymem_PyMalloc = __Pyx_ImportType(__pyx_t_1, "cymem.cymem", "PyMalloc", sizeof(struct __pyx_obj_5cymem_5cymem_PyMalloc), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5cymem_5cymem_PyMalloc) __PYX_ERR(5, 4, __pyx_L1_error)
  __pyx_vtabptr_5cymem_5cymem_PyMalloc = (struct __pyx_vtabstruct_5cymem_5cymem_PyMalloc*)__Pyx_GetVtable(__pyx_ptype_5cymem_5cymem_PyMalloc->tp_dict); if (unlikely(!__pyx_vtabptr_5cymem_5cymem_PyMalloc)) __PYX_ERR(5, 4, __pyx_L1_error)
  __pyx_ptype_5cymem_5cymem_PyFree = __Pyx_ImportType(__pyx_t_1, "cymem.cymem", "PyFree", sizeof(struct __pyx_obj_5cymem_5cymem_PyFree), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5cymem_5cymem_PyFree) __PYX_ERR(5, 10, __pyx_L1_error)
  __pyx_vtabptr_5cymem_5cymem_PyFree = (struct __pyx_vtabstruct_5cymem_5cymem_PyFree*)__Pyx_GetVtable(__pyx_ptype_5cymem_5cymem_PyFree->tp_dict); if (unlikely(!__pyx_vtabptr_5cymem_5cymem_PyFree)) __PYX_ERR(5, 10, __pyx_L1_error)
  __pyx_ptype_5cymem_5cymem_Pool = __Pyx_ImportType(__pyx_t_1, "cymem.cymem", "Pool", sizeof(struct __pyx_obj_5cymem_5cymem_Pool), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5cymem_5cymem_Pool) __PYX_ERR(5, 16, __pyx_L1_error)
  __pyx_vtabptr_5cymem_5cymem_Pool = (struct __pyx_vtabstruct_5cymem_5cymem_Pool*)__Pyx_GetVtable(__pyx_ptype_5cymem_5cymem_Pool->tp_dict); if (unlikely(!__pyx_vtabptr_5cymem_5cymem_Pool)) __PYX_ERR(5, 16, __pyx_L1_error)
  __pyx_ptype_5cymem_5cymem_Address = __Pyx_ImportType(__pyx_t_1, "cymem.cymem", "Address", sizeof(struct __pyx_obj_5cymem_5cymem_Address), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5cymem_5cymem_Address) __PYX_ERR(5, 28, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initelements(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initelements(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_elements(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_elements(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_elements(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'elements' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_elements(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("elements", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_atpy__src__cython__elements) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "atpy.src.cython.elements")) {
      if (unlikely(PyDict_SetItemString(modules, "atpy.src.cython.elements", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) goto __pyx_L1_error;
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) goto __pyx_L1_error;
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() != 0)) goto __pyx_L1_error;
  if (unlikely(__Pyx_modinit_type_import_code() != 0)) goto __pyx_L1_error;
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "atpy/src/cython/elements.pyx":1
 * import numpy as np             # <<<<<<<<<<<<<<
 * cdef class Element:
 *     def __cinit__(self,**kargs):
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cpp/cppquadrupole.pxd":74
 * 
 * 
 *     inline void update(double* parms)nogil:             # <<<<<<<<<<<<<<
 *         this.l = parms[0]
 *         this.k1= parms[2]
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init atpy.src.cython.elements", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init atpy.src.cython.elements");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* UnpackUnboundCMethod */
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    }
#endif
    return 0;
}

/* CallUnboundCMethod0 */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self) {
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_ASSUME_SAFE_MACROS
    args = PyTuple_New(1);
    if (unlikely(!args)) goto bad;
    Py_INCREF(self);
    PyTuple_SET_ITEM(args, 0, self);
#else
    args = PyTuple_Pack(1, self);
    if (unlikely(!args)) goto bad;
#endif
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    Py_DECREF(args);
bad:
    return result;
}

/* py_dict_keys */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Keys(PyObject* d) {
    if (PY_MAJOR_VERSION >= 3)
        return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyDict_Type_keys, d);
    else
        return PyDict_Keys(d);
}

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* UnpackTupleError */
static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

/* UnpackTuple2 */
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
        PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2, int decref_tuple) {
    PyObject *value1 = NULL, *value2 = NULL;
#if CYTHON_COMPILING_IN_PYPY
    value1 = PySequence_ITEM(tuple, 0);  if (unlikely(!value1)) goto bad;
    value2 = PySequence_ITEM(tuple, 1);  if (unlikely(!value2)) goto bad;
#else
    value1 = PyTuple_GET_ITEM(tuple, 0);  Py_INCREF(value1);
    value2 = PyTuple_GET_ITEM(tuple, 1);  Py_INCREF(value2);
#endif
    if (decref_tuple) {
        Py_DECREF(tuple);
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
#if CYTHON_COMPILING_IN_PYPY
bad:
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
#endif
}
static int __Pyx_unpack_tuple2_generic(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                       int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    iternextfunc iternext;
    iter = PyObject_GetIter(tuple);
    if (unlikely(!iter)) goto bad;
    if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
    iternext = Py_TYPE(iter)->tp_iternext;
    value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
    value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
    if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
    Py_DECREF(iter);
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
    if (is_dict) {
#if !CYTHON_COMPILING_IN_PYPY
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
#elif PY_MAJOR_VERSION >= 3
        static PyObject *py_items = NULL, *py_keys = NULL, *py_values = NULL;
        PyObject **pp = NULL;
        if (method_name) {
            const char *name = PyUnicode_AsUTF8(method_name);
            if (strcmp(name, "iteritems") == 0) pp = &py_items;
            else if (strcmp(name, "iterkeys") == 0) pp = &py_keys;
            else if (strcmp(name, "itervalues") == 0) pp = &py_values;
            if (pp) {
                if (!*pp) {
                    *pp = PyUnicode_FromString(name + 4);
                    if (!*pp)
                        return NULL;
                }
                method_name = *pp;
            }
        }
#endif
    }
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto __PYX_BAD;
            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto __PYX_BAD;
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
